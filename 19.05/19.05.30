배열 Array
-> 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것
-> '같은 타입'이 중요
-> 변수의 선언과 달리 데이터의 수가 많아도 배열의 길이만 바꾸면 가능

선언
-> 원하는 타입의 변수를 선언
-> 변수 또는 타입에 배열을 의미하는 대괄호[]를 붙인다
-> 타입[] 변수이름;
   타입 변수이름[];

생성
-> 선언한 다음 배열을 생성
-> 배열을 선언하는 것은 참조변수를 위한 공간이 만들어지는 것
-> 값을 저장할 수 있는 공간을 만들기 위해서 배열을 생성
-> 연산자 'new'와 함께 배열의 타입과 길이를 지정
-> 타입[] 변수이름;   // 선언
   변수이름 = new 타입[길이];   // 생성
   
-> 배열의 선언과 생성을 한 줄로 간략히 할 수 있다
-> 타입[] 변수이름 = new 타입[길이];   // 선언과 생성

배열의 선언과 생성과정
ex) int형 배열
  1. 배열 참조변수 선언
  2. 연산자 'new'에 의해서 메모리의 빈 공간에 데이터를 저장할 수 있는 공간 마련
  3. 배열요소는 자동적으로 int의 default인 0으로 초기화
  4. 대입연산자 '='에 의해 배열의 주소가 참조변수에 저장
  
--------------------

배열의 길이와 인덱스
-> 배열의 각 저장공간을 '배열의 요소(element)'
-> '배열이름[인덱스]'의 형식으로 요소에 접근

-> 인덱스(index)는 배열의 요소마다 붙여진 일련번호
-> index의 범위는 0부터 '배열길이-1'까지

-> 배열에 값을 저장하고 읽어오는 방법은 변수와 동일
-> 단 변수이름이 아닌 '배열이름[인덱스]'를 사용
-> index로 상수 대신 변수나 수식도 사용 가능

-> for문의 제어변수 i는 배열의 index에 매우 적합
-> []안에 수식이 포함된 경우, 수식을 먼저 계산

-> index의 범위를 벗어난 값을 index로 사용하지 않아야 한다
-> 배열의 index로 변수를 주로 사용
-> 변수의 값은 실행 시에 대입되므로 컴파일러는 이 값의 범위를 확인하지 못한다
-> 유효하지 않은 값을 사용하면, 실행 시에 에러 발생
   Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException
   
배열의 길이
-> 배열의 길이는 배열의 요소의 개수, 즉 값을 저장할 수 있는 공간의 개수
-> 길이는 양의 정수, 최대 값은 int타입의 최대값
-> 길이가 0인 배열도 생성 가능

-> 배열의 길이는 int범위의 양의 정수(0도 포함)이어야 한다

배열이름.length
-> JVM이 모든 배열의 길이를 별도로 관리, '배열이름.length'를 통해서 정보를 얻을 수 있다
-> 배열은 한번 생성하면 길이를 변경할 수 없기때문에, '배열이름.length'는 상수

-> '배열이름.length'는 배열의 길이가 변경되면 자동적으로 변경된 배열의 길이를 값으로 갖는다

배열의 길이 변경하기
  1. 더 큰 배열을 새로 생성한다
  2. 기존 배열의 내용을 새로운 배열에 복사한다
-> 처음부터 배열의 길이를 넉넉하게 잡는게 가장 좋다

--------------------

배열의 초기화
-> 배열은 생성과 동시에 자동적으로 자신의 타입에 해당하는 기본값으로 초기화
-> 원하는 값을 저장하려면 각 요소마다 값을 지정해 줘야한다

-> 배열의 길이가 큰 경우 for문을 사용하는 것이 좋다
-> for문으로 배열을 초기화하려는 경우, 일정한 규칙이 있어야만 가능

-> 자바에서는 간단히 초기화 할 수 있는 방법을 제공
ex) int[] score = new int[]{ 10, 20, 30, 40, 50};   // 생성과 동시에 초기화
-> {} 안에 쉼표로 구분해서 나열, 배열의 길이가 자동으로 결정
-> 'new 타입[]'을 생략하는 것도 가능
-> 배열의 선언과 생성을 따로 하는 경우 생략 불가
-> 매개 변수로 int배열을 받는 add메서드가 정의되어 있고 호출해야할 경우 생략 불가

배열의 출력
-> for문을 사용

-> 더 간단한 방법 : Arrays.toString(배열이름) 메서드를 사용
-> 배열의 모든 요소를 '[첫번째 요소, 두번째 요소, ...]'와 같은 형식의 문자열로 만들어 반환
-> Arrays.toString()을 사용하려면, import java.util.*을 추가해야 한다

-> 배열 이름의 값을 바로 출력하면 '타입@주소'의 형식으로 출력
-> 주소는 실제 주소가 아닌 내부 주소

-> char배열은 println메서드로 출력하면 각 요소가 구분자없이 그대로 출력

--------------------

배열의 복사
for문을 이용해서 배열을 복사
 ex) int[] arr = new int[5];
     int[] tmp = new int[arr.length * 2];
     for (int i = 0; i < arr.length; i++) {
        tmp[i] = arr[i];
     }
     arr = tmp;
  1. arr.length의 값이 5이므로 길이가 10인 tmp가 생성, tmp의 각 요소는 0으로 초기화
  2. for문을 이용해서 배열 arr의 모든 요소에 저장된 값을 하나씩 tmp에 복사
  3. 참조변수 arr에 참조변수 tmp의 값을 저장, arr은 배열 tmp를 가리키게 된다
-> 배열 arr과 배열 tmp는 이름만 다를 뿐 동일한 배열

System.arraycopy()를 이용한 배열의 복사
-> arraycopy()는 지정된 범위의 값들을 한 번에 통째로 복사
-> 각 요소들이 연속적으로 저장되어 있다는 특성때문에 가능

-> System.arraycopy(num, 0, newNum, 0, num.length)
-> num[0]에서 newNum[0]으로 num.length개의 데이터를 복사
-> 어떤 배열의 몇 번째 요소에서 어느 배열의 몇 번째 요소로 몇 개의 값을 복사할 것인지 지정해줘야 한다

--------------------

버블 정렬 알고리즘
-> 배열의 길이가 n일 때 배열의 첫 번째부터 n-1까지의 요소에 대해
  근접한 값과 크기를 비교하여 자리 바꿈을 반복하는 것
