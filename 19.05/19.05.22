기본형(Primitive type)

논리형 - boolean
-> boolean형 변수는 true false 둘 중 하나
-> default는 false
-> yes/no, on/off 등 논리구현에 사용
-> 1bit로도 충분, but 자바 최소단위는 byte이므로 boolean의 크기는 1byte
-> TRUE와 true는 다른 것으로 간주

문자형 - char
-> char형 변수는 단 하나의 문자만 저장
-> 실제로 저장되는건 문자의 유니코드
-> 'A' 말고 65도 가능 ex) char ch = 'a'; 와 char ch = 65;는 같다

특수문자
-> tab = \t
-> backspace = \b
-> new line = \n
-> 유니코드 = \u유니코드

char타입의 크기는 2byte = 16bit, short타입의 크기도 2byte = 16bit
-> char타입 유니코드는 모두 양수, short타입 유니코드는 음수양수

인코딩과 디코딩
인코딩 -> 문자를 코드로 변환
디코딩 -> 코드를 문자로 변환

ASCII(American Standard Code for Information Interchange)
-> 128개의 문자 집합 제공 7bit 부호

확장 ASCII
-> 일반적으로 데이터는 byte, ASCII는 7bit이므로 1bit가 남음
-> 255개 문자 표현

유니코드(Unicode)
-> 전 세계의 모든 문자를 하나의 통일된 문자집합으로 표현
-> 초기엔 2byte(16bit), 차후에 21bit로 확장
-> 자바에서는 UTF-16 사용
-> UTF-16은 2byte 고정 크기
-> UTF-8은 1~4byte 가변 크기
-> 인터넷에서는 전송속도가 중요하므로, 주로 UTF-8을 사용

정수형 - byte short int long
-> 4개의 자료형, byte부터 long까지 2배씩 증가
-> 기본 자료형은 int

모든 리터럴은 변수에 저장될 때 2진수로 저장
-> 모든 정수형은 부호를 포함, 왼쪽 첫 비트를 부호 비트(sign bit)로 사용

저장하려는 정수값의 범위에 따라 자료형을 선택
-> byte와 short은 범위가 작으므로 int 사용을 권장
-> JVM의 피연산자 스택(operand stack)은 4byte 단위로 저장하므로 int가 효율적

오버플로우(Overflow)
-> 타입을 표현할 수 있는 값의 범위를 넘어서는 것
-> 2진수 '1111'에 1을 더하면 '10000', 4bit를 초과(over)
-> 부호없는 정수는 '0000'이 될 때, 부호있는 정수는 부호비트가 바뀔 때 발생

실수형 - float, double
-> float의 정밀도는 7자리, double의 정밀도는 15자리
-> 연산속도의 향상이나 메모리 절약은 'float', 더 큰 값의 범위나 높은 정밀도는 'double'

-> printf 메서드에서 실수형 지시자는 '%f'
-> '%f'는 소수점 이하 6자리까지 출력

-> 실수형은 '부호', '지수', '가수'로 이루어져 저장
-> 부호(sign bit)는 1bit, 2의 보수법을 사용하지 않는다
-> 지수(exponent)는 8bit, 부호있는 정수
-> 가수(mantissa)는 23bit, 실제 값인 가수를 저장, float의 경우 2진수 23자리를 저장

부동소수점의 오차
-> 10진수의 유한소수가 2진수로 저장될 때는 무한소수가 되는 경우가 있다

--------------------
