논리 연산자 &&, ||, !
-> 두 개의 조건을 'AND'나 'OR'로 연결하여 하나의 식으로 표현

&&(AND 결합)
-> 피연산자 양쪽 모두 true

ex) 'X > 10', 'X < 20'
-> 10 < X && X < 20
-> 변수를 왼쪽에 쓰지만 가독성측면에서 위와 같이 작성 가능, 논리연산자 생략은 불가능

||(OR 결합)
-> 피연산자 중 하나라도 true

ex) i가 2의 배수 또는 3의 배수
-> i%2 == 0 || i%3 == 0
-> i가 2의 배수라는 조건은 2로 나누었을 때 나머지가 0이라는 뜻

효율적인 연산(short circuit evaluation)
-> OR연산의 경우, 어느 한쪽만 'true'여도 전체 연산결과가 'true'이므로 좌측 피연산자가 'true'이면,
   우측 피연산자는 평가하지 않는다
-> AND연산의 경우, 좌측 피연산자가 'false'이면, 우측 피연산자는 평가하지 않는다
-> 같은 조건식이라도 피연산자의 위치에 따라서 연산속도가 달라질 수 있다

논리 부정 연산자 !
-> 피연산자가 true이면 false, false이면 true를 반환
-> 전원버튼 또는 토글 버튼을 논리적으로 구현하는데 사용
-> '!'가 자주 사용되는 곳은 조건문과 반복문의 조건식이며, 조건식을 보다 이해하기 쉽게 표현 가능

ex) ch < 'a' || ch > 'z'  <->  !('a' <= ch && ch <= 'z')

--------------------

비트 연산자 &, |, ^, ~, <<, >>
-> 피연산자를 비트단위로 논리 연산

|(OR 연산자)
-> 피연산자 중 한쪽의 값이 1이면 1
-> 주로 특정 비트의 값을 변경할 때 사용

&(AND 연산자)
-> 피연산자 양쪽 모두 1이어야 1
-> 특정 비트의 값을 뽑아낼 때 사용

^(XOR 연산자)
-> 피연산자의 값이 서로 다를 때만 1
-> 같은 값으로 두고 XOR 연산을 수행하면 원래의 값으로 돌아오는 특징

비트 전환 연산자 ~
-> 피연산자를 2진수로 표현했을 때, 0은 1, 1은 0으로 바꾼다
-> '비트 전환'되면, 부호가 있는 타입의 피연산자는 부호가 반대로 변경(1의 보수)

쉬프트 연산자 <<, >>
-> 피연산자의 각 자리(2진수로 표현)를 오른쪽 또는 왼쪽으로 이동(shift)
-> '<<'은 부호에 상관없이 왼쪽으로 이동시킨후 빈칸을 0으로 채운다
-> '>>'은 음수인 경우 빈자리를 1로 채운다

-> 쉬프트 연산자의 좌측 피연산자는 산술변환이 적용

-> 'x << n'은 'x * 2^n', 'x >> n'은 'x / 2^n'
-> n의 값이 자료형의 bit수 보다 크면, 자료형의 bit수로 나눈 나머지만큼 이동

--------------------

조건 연산자 '? :'
-> 조건식 ? 식1 : 식2
-> 조건식의 평가 결과가 true이면 식1, false이면 식2
-> if문으로 바꿔 쓸 수 있으며, 조건 연산자를 사용하면 보다 간단히 표현 가능

-> 조건 연산자를 중첩해서 셋 이상 중의 하나를 결과로 출력 가능
-> 단, 가독성이 떨어지므로 한번 정도만 중첩하는 것이 좋다

-> 식1과 식2, 두 피연산자의 타입이 다른 경우, 이항 연산자처럼 산술 변환이 발생

대입 연산자 =, op=
-> 변수와 같은 저장공간에 값 또는 수식의 연산결과를 저장하는데 사용
-> 오른쪽 피연산자의 값을 왼쪽 피연산자에 저장
-> 연산 진행 방향은 오른쪽에서 왼쪽

lvalue, rvalue
-> 왼쪽 피연산자 lvalue(left value), 오른쪽 피연산자 rvalue(right value)
-> lvalue는 반드시 변수처럼 값을 변경할 수 있는 것, rvalue는 변수뿐 아니라 식이나 상수 모두 가능

-> 변수 앞에 키워드 'final'을 붙이면 상수화, 상수는 반드시 선언과 동시에 값을 저장, 저장된 값은 변경 불가

복합 대입 연산자
-> 다른 연산자(op)와 결합하여 사용
-> '+=', '-=', '*=', '/=' 등등
-> 결합된 두 연산자는 공백없이 사용
-> 대입연산자의 우변이 둘 이상의 항으로 이루어져 있는 경우 주의

--------------------
