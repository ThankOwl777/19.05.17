연산자(Operator)

연산자
-> 연산을 수행하는 기호 ex) +, -, *, / 등등
피연산자
-> 연산자의 작업 대상 ex) 변수, 상수, 리터럴, 수식

-> 연산자는 피연산자로 연산을 수행하고 나면 항상 결과값을 반환

식(expression)
-> 식을 평가(evaluation) = 계산
-> 하나의 식에 하나의 결과(값)

-> 대입 연산자 '='를 사용해서 값을 저장할 수 있는 공간을 지정해줘야 값이 저장

-> 식의 평가결과 출력만을 원할 경우, println() 메서드의 괄호 안에 직접 식을 작성

종류
-> 산술, 비교, 논리, 대입
-> 단항 연산자, 이항 연산자, 삼항 연산자
-> 대부분은 이항, 삼항 연산자는 오직 '? :' 하나

우선 순위
-> 단항 > 이항 > 삼항 > 산술 > 비교 > 논리 > 대입

결합규칙
1. 산술 > 비교 > 논리 > 대입. 대입은 제일 마지막에 수행된다
2. 단항(1) > 이항(2) > 삼항(3). 단항 연산자의 우선순위가 이항 연산자보다 높다
3. 단항 연산자와 대입 연산자를 제외한 모든 연산의 진행방향은 왼쪽에서 오른쪽이다

산술변환
-> 피연산자의 타입이 서로 다르면 연산 전에 자동 형변환되는 것
-> 이항 연산에서만 아니라 단항 연산에서도 발생
-> 규칙
   1. 두 피연산자의 타입을 같게 일치시킨다 (보다 큰 타입으로 일치)
   2. 피연산자의 타입이 int보다 작다면 int로 변환된다

-> 연산결과의 타입은 피연산자의 타입과 일치

--------------------

단항연산자

증감연산자
-> 피연산자에 저장된 값을 1 증가 또는 감소
-> 정수와 실수 모두 가능, 상수는 값을 변경할 수 없으므로 불가능

-> 피연산자의 왼쪽에 위치하면 '전위형(prefix)', 오른쪽에 위치하면 '후위형(postfix)'
-> 전위형은 연산하기 전에 적용, 후위형은 연산 후에 적용

-> 독립적인 하나의 문장으로 쓰인 경우 전위형과 후위형의 차이가 없다
-> 식에 두 번 이상 포함된 변수에 증감연산자 사용은 피해야 한다

부호연산자
-> '-'는 피연산자의 부호를 반대로 변경한 결과를 반환, '+'는 사용하지 않는다
-> boolean형과 char형을 제외한 기본형에만 사용 가능

--------------------
