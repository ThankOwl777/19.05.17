변수(Variable)

변수 = 하나의 값을 저장할 수 있는 메모리상의 공간
-> 다른 값을 저장하면 기존 값이 사라짐

선언
변수타입 변수이름;

변수타입 -> 정수형, 실수형, 문자형 등등
변수이름 -> 값을 저장하는 공간의 이름

ex) int age; // int:type age:name

초기화
변수선언 = 값;

메모리는 공유하는 자원 -> garbage value
-> 초기화하여 원하는 값으로 미리 설정

값을 저장할 때는 대입연산자'='을 사용

ex) int a; // a에 garbage value가 있을 수 있음
    int a = 0; // a를 0으로 초기화
    
교환
x, y가 있을 때 두 값을 교환하려면 임시 저장할 공간이 필요
-> 물 한 컵과 우유 한 컵을 바꾸는 상황

명명규칙
1. 대소문자 구분 -> True와 true는 다른 것으로 간주
2. 예약어 사용 불가 -> true는 불가, True는 가능
3. 숫자로 시작 불가 -> top10은 가능, 7up은 불가
4. 특수문자는 '_'와 '$'만 가능

권장규칙
1. 클래스 이름의 첫 글자는 대문자, 변수와 메서드 이름의 첫 글자는 소문자
2. 여러 단어 이름은 단어의 첫 글자를 대문자
3. 상수의 이름은 모두 대문자
4. 여러 단어는 '_'로 구분

--------------------

타입
1. 기본형(Data type)
-> 실제 값(data)를 저장
-> 논리형(boolean), 문자형(char), 정수형(byte, int, short, long),
  실수형(float, double)
-> 계산을 위한 실제 값을 저장

2. 참조형(ref type)
-> 객체의 주소를 저장
-> 클래스 이름이 타입
ex) class Date;
    Date today = new Date(); // Date객체를 생성
    
기본형(Primitive type)
-> 8개의 타입
-> boolean = 1byte
-> char = 2byte
-> byte = 1byte
-> int = 4byte
-> short = 2byte
-> long = 8byte
-> float = 4byte
-> double = 8byte

상수(Constant)
상수는 변수와 달리 한번 값을 저장하면 변경 불가능
-> 변수 타입 앞에 'final' 입력
-> 선언과 동시에 초기화, 이후 변경 불가능
ex) final int MAX_SPEED = 10;

리터럴(Literal)
일반적인 의미의 '상수'
->Constant는 변경 불가능한 저장공간
->Literal은 '값' 그 자체

--------------------


