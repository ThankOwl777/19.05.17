반복문 for, while, do-while
-> 어떤 작업이 반복적으로 수행되도록 할 때 사용
-> for문이나 while문에 속한 문장은 조건에 따라 한 번도 수행되지 않을 수 있다
-> do-while문에 속한 문장은 최소한 한 번은 수행된다

for문
-> 반복 횟수를 알고 있을 때 적합

구조와 수행순서
-> for(초기화; 조건식; 증감식) {
      수행될 문장;
   }
  1. 초기화
  2. 조건식
  3. 수행될 문장
  4. 증감식
  5. 조건식
-> 조건식이 true일 때 2,3,4가 계속 반복되다가 조건식이 false가 되는 순간 반복문을 벗어난다

초기화
-> 반복문에 사용될 변수를 초기화
-> 처음 한번만 수행
-> 보통 변수 하나로 for문을 제어
-> 둘 이상의 변수가 필요할 때는 ','를 구분자로 변수를 초기화, 두 변수의 타입은 같아야 한다

조건식
-> true면 계속 반복, false면 반복 중단
-> 조건식에 따라 무한반복에 빠질 수도 있다

증감식
-> 변수의 값을 증가시키거나 감소시키는 식
-> '++'이 주로 사용
-> ','를 이용해서 두 문장 이상을 하나로 연결할 수 있다

-> 세 가지 요소는 생략 가능
-> 조건식이 생략된 경우, true로 간주되어 무한 반복문
-> {}안에 if문을 넣어 특정 조건을 만족하면 for문을 빠져나오게 할 수 있다

중첩 for문
-> for문 안에 다른 for문을 포함
-> 중첩 횟수 제한은 거의 없다

향상된 for문(enhanced for statement)
-> for(타입 변수명 : 배열 또는 컬렉션) {
      반복할 문장;
   }
-> 타입은 배열 또는 컬렉션의 요소의 타입
-> 배열 또는 컬렉션에 저장된 값이 매 반복마다 하나씩 순서대로 읽혀서 변수에 저장
-> 배열이나 컬렉션에 저장된 요소들을 읽어오는 용도로만 사용

--------------------

while문
-> for문에 비해 구조가 간단
-> while (조건식) {
      반복될 문장;
   }
  1. 조건식이 true면 {}안으로, false이면 while문을 벗어난다
  2. {}의 문장을 수행하고 다시 조건식으로 돌아간다
-> 조건식이 false가 될 때까지 반복

for문과 while문의 비교
-> for문은 초기화, 조건식, 증감식을 한 곳에 모아놓은 것
-> for문과 while문은 항상 서로 변환이 가능

조건식
-> while문의 조건식은 생략불가
-> while () {
   
   }
-> error : 조건식이 없음.
-> 조건식이 항상 참이 되도록 하려면 true를 넣어야 한다

--------------------

do-while문
-> while문의 변형으로 기본적인 구조는 while문과 같으나 조건식과 {}의 순서를 변경한 것
-> {}을 먼저 수행한 후에 조건식을 평가
-> do {
      수행될 문장;
   } while (조건식);

break문
-> 반복문에서도 break문을 사용가능
-> 자신이 포함된 가장 가까운 반복문을 벗어난다
-> 주로 if문과 함께 사용되어 특정 조건을 만족하면 반복문을 벗어나도록 한다

continue문
-> 반복문 내에서만 사용가능
-> 반복이 진행되는 도중 반복문의 끝으로 이동시켜 다음 반복을 수행
-> for문은 증감식으로, while문과 do-while문은 조건식으로 이동

-> 반복문을 벗어나지 않고 다음 반복을 계속 수행

이름 붙은 반복문
-> break문으로 중첩 반복문을 완전히 벗어날 수 없다
-> 중첩 반복문에 이름을 붙이고 break문과 continue문에 지정, 하나 이상의 반복문을 벗어나거나 건너뛸 수 있다

--------------------
