조건문
-> 조건식과 문장을 포함하는 블럭{}으로 구성, 연산결과에 따라 프로그램의 실행흐름을 변경

if문
-> 가장 기본적인 조건문
-> if (조건식) {

   }
-> 조건식이 true라면 블럭 내의 문장들을 수행

조건식
-> 비교연산자와 논리연산자로 구성
-> 자바에서 조건식의 결과는 반드시 true 또는 false이어야 한다

블럭 {}
-> 여러 문장을 하나의 단위로 묶은 것
-> '}' 다음에 ';'를 붙이지 않는다
-> 블럭 내의 문장이 하나뿐 일 때 괄호 {}를 생략 가능

if-else문
-> if문에서 false일 때 else블럭의 문장을 수행
-> if (조건식) {

   } else {
   
   }
-> 조건식의 결과에 따라 두 블럭 중 한 블럭의 내용이 수행

-> 두 개의 if문을 if-else문으로 바꿀 수 있지만, 항상 가능한 것은 아니다
-> if-else문 역시 블럭 내의 문장이 하나뿐 일 때 괄호 {}를 생략 가능

if-else if문
-> 처리해야할 경우의 수가 셋 이상인 경우
-> if (조건식 1) {

   } else if (조건식 2) {
   
   } else if (조건식 3) {
   
   } else {
   
   }
-> 위에서부터 순차적으로 평가하여 결과가 true인 조건식을 만나면, 해당 블럭{}만 수행
-> true가 없을 경우, 마지막 else블럭의 문장들이 수행
-> else블럭은 생략 가능, 이 경우 if-else if문의 어떤 블럭도 수행되지 않을 수 있다

-> 조건식을 바꾸지 않고 여러 개의 if문으로 쪼개놓으면 전혀 다른 코드가 된다

중첩 if문
-> if문 블럭 내에 또 다른 if문을 포함
-> 중첩 횟수 제한은 거의 없다

-> 문장의 구분을 위해서 {}를 명확히 해주는 것이 좋다

--------------------

switch문
-> 하나의 조건식으로 많은 경우의 수를 처리 가능
-> 제약조건이 있기 때문에, if문으로 작성해야 하는 경우가 있다
-> switch (조건식) {
      case 값1 :
      
         break;
      case 값2 :      
      
         break;
      default :
      
   }
  1. 조건식을 계산한다
  2. 조건식의 결과와 일치하는 case문으로 이동한다
  3. 이후의 문장들을 수행한다
  4. break문이나 switch문의 끝을 만나면 switch문 전체를 빠져나간다
-> 조건식의 결과와 일치하는 case문이 없는 경우 default문으로 이동
-> break문은 case문의 영역을 구분하는 역할
-> 경우에 따라서 break문을 생략하는 경우도 있다

switch문의 제약조건
1. switch문의 조건식 결과는 정수 또는 문자열이어야 한다
2. case문의 값은 정수 상수만 가능하며, 중복되지 않아야 한다

switch문의 중첩
-> if문처럼 중첩이 가능
-> break문의 생략에 주의
--------------------

Math.random()
-> 난수 생성 메서드, 0.0과 1.0 사이의 double 값 하나를 반환

문자열.charAt(index)
-> 문자열에 저장된 문자를 가져온다
-> char타입은 정수(유니코드)로 저장되기 때문에 switch문의 조건식과 case문에 사용할 수 있다
