java.math.BigInteger클래스
-> 정수형으로 표현할 수 있는 값의 한계가 있음
-> 가장 큰 정수형 타입인 long으로 표현할 수 있는 값은 10진수로 19자리
-> 더욱 큰 값을 다뤄야할 때 사용하면 좋은 것이 BigInteger

-> 내부적으로 int배열을 사용해서 값을 다룸. 그래서 long타입보다 훨씬 큰 값을 다룰 수 있음
-> final int signum; // 부호. 1(양수), 0, -1(음수) 셋 중 하나
   final int[] mag;  // 값(magnitude)
-> BigInteger는 String처럼 불변(immutable)이고 값을 '2의 보수'의 형태로 표현함

BigInteger의 생성
-> 여러가지 방법 중 문자열로 숫자를 표현하는 것이 일반적
-> BigInteger val;
   val = new BigInteger("12345678901234567890"); // 문자열로 생성
   val = new BigInteger("FFFF", 16);             // n진수(radix)의 문자열로 반환
   val = BigInteger.valueOf(1234567890L);        // 숫자로 생성

다른 타입으로의 변환
-> BigInteger를 문자열, 또는 byte배열로 변환하는 메서드
-> String toString()           // 문자열로 변환
   String toString(int radix)  // 지정된 진법(radix)의 문자열로 변환
   byte[] toByteArray()        // byte배열로 변환

-> Number로부터 상속받은 기본형으로 변환하는 메서드
-> int    intValue()
   long   longValue()
   float  floatValue()
   double doubleValue()

-> 정수형으로 변환하는 메서드 중 끝에 'Exact'가 붙은 것
-> byte byteValueExact()
   int  intValueExact()
   long longValueExact()
-> 변환한 결과가 변환한 타입의 범위에 속하지 않으면 ArithmeticException을 발생시킴

BigInteger의 연산
-> 정수형에 사용할 수 있는 모든 연산자와 수학적인 계산을 쉽게 해주는 메서드들이 정의되어 있음
-> 기본적인 연산을 수행하는 메서드
-> BigInteger add(BigInteger val)       // 덧셈(this + val)
   BigInteger subtract(BigInteger val)  // 뺄셈(this - val)
   BigInteger multiply(BigInteger val)  // 곱셈(this * val)
   BigInteger divide(BigInteger val)    // 나눗셈(this / val)
   BigInteger remainder(BigInteger val) // 나머지(this % val)

-> BigInteger는 불변이므로, 반환타입이 BigInteger란 얘기는 새로운 인스턴스가 반환된다는 뜻

비트 연산 메서드
-> 큰 숫자를 다루기 위한 클래스이므로, 성능을 향상시키기 위해 비트단위로 연산을 수행하는 메서드들을 가지고 있음
-> int        bitCount()      // 2진수로 표현했을 때, 1의 개수(음수는 0의 개수)를 반환
   int        bitLength()     // 2진수로 표현했을 때, 값을 표현하는데 필요한 bit수
   boolean    testBit(int n)  // 우측에서 n+1번째 비트가 1이면 true, 0이면 false
   BigInteger setBit(int n)   // 우측에서 n+1번째 비트를 1로 변경
   BigInteger clearBit(int n) // 우측에서 n+1번째 비트를 0으로 변경
   BigInteger flipBit(int n)  // 우측에서 n+1번째 비트를 전환(1은 0으로, 0은 1로)
   
--------------------

