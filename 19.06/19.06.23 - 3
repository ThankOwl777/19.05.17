join()과 StringJoiner
-> join()은 여러 문자열 사이에 구분자를 넣어서 결합
-> 구분자로 문자열을 자르는 split()과 반대의 작업

-> java.util.StringJoiner클래스를 사용해서 문자열을 결합
-> StringJoiner sj = new StringJoiner(",", "[", "]");

--------------------

유니코드의 보충문자
-> 유니코드는 원래 2byte, 즉 16비트 문자체계인데, 부족하여 20비트로 확장
-> 확장에 의해 추가된 문자들을 '보충 문자(supplementary characters)'라고 함
-> 매개변수가 'int ch'인 것들은 보충문자를 지원
-> 매개변수가 'char ch'인 것들은 지원하지 않음

--------------------

문자 인코딩 변환
-> getBytes(String charsetName)를 사용하면, 문자열의 문자 인코딩을 다른 인코딩으로 변경할 수 있음
-> 자바가 UTF-16을 사용하지만, 문자열 리터럴에 포함되는 문자들은 OS인코딩을 사용함
ex) import java.util.StringJoiner;

    class String {
       public static void main(String[] args) throws Exception {
          String str = "가";
          
          byte[] bArr1 = str.getByte("UTF-8");
          byte[] bArr2 = str.getByte("CP949");

          System.out.println("UTF-8:" + joinByteArr(bArr1));
          System.out.println("CP949:" + joinByteArr(bArr2));
          
          System.out.println("UTF-8:" + new String(bArr1, "UTF-8"));
          System.out.println("CP949:" + new String(bArr2, "CP949"));
       }
       
       static String joinByteArr(byte[] bArr) {
          StringJoiner sj = new StringJoiner(":", "[", "]");
          
          for (byte b : bArr)
             sj.add(String.format("%02X", b));
          return sj.toString();
       }
    }
-> UTF-8은 한글 한 글자를 3byte로 표현, CP949는 2byte로 표현
-> 문자 '가'는 UTF-8로 '0xEAB080', CP949로 '0xB0A1'

--------------------

String.format()
-> format()은 형식화된 문자열을 만들어내는 간단한 방법
-> printf()와 사용법이 같음
-> String str = String.format("%d 더하기 %d는 %d입니다.", 1, 2, 1+2);
   System.out.println(str);
   
--------------------

기본형 값을 String으로 변환
-> 숫자에 빈 문자열"" 을 더해주면 됨
-> 성능은 valueOf()가 더 좋지만, 빈 문자열이 간단하고 편하기 때문에 성능향상이 필요한 경우에만 valueOf()를 쓰자
ex) int i = 10;
    String str1 = i + "";
    String str2 = String.valueOf(i);

--------------------

String을 기본형 값으로 변환
-> valueOf()를 쓰거나 parseInt()를 사용
-> 원래 valueOf()의 반환 타입은 int가 아니라 Integer
-> valueOf(String s)는 메서드 내부에서 parseInt(String s)를 호출
-> 두 메서드는 반환 타입만 다르고 같은 메서드임

--------------------

