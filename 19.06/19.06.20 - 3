메서드에 예외 선언하기
-> 예외를 처리하는 방법은 try-catch문을 사용하는 것 외에, 예외를 메서드에 선언하는 방법

-> 메서드에 예외를 선언하려면 키워드 throws를 선언부에 사용
-> 메서드에서 발생할 수 있는 예외를 작성. 여러 개일 경우 쉼표로 구분
-> void mthod() throws Exception1, Exception2, ... ExceptionN {
      // 메서드 내용
   }

-> 모든 예외의 최고조상인 Exception클래스를 메서드에 선언
-> 모든 종류의 예외가 발생할 가능성이 있다는 뜻
-> void method() throws Exception {
      // 메서드 내용
   }
-> 자손타입의 예외까지 발생할 수 있음

-> 메서드의 선언부에 예외를 선언함으로서, 사용하기 위해 어떤 예외들이 처리되어야하는지 알기 쉬움

-> 일반적으로 메서드에 예외를 선언할 때 RuntimeException클래스들은 적지 않음
-> 문제가 되지는 않지만, 반드시 처리해주어야 하는 예외들만 선언

-> 메서드의 throws에 명시하는 것은 예외를 처리하는 것이 아님
-> 자신을 호출한 메서드에게 예외를 전달하여 예외처리를 떠맡기는 것
-> 단순히 예외를 전달만 하는 것이므로, 어느 한 곳에서는 try-catch문으로 예외처리를 해주어야 함

-> 예외가 발생한 메서드에서 처리할 수도, 메서드를 호출한 메서드에서 처리할 수도 있음
-> 또는 두 메서드가 예외처리를 분담할 수도 있음

--------------------

ex) import java.io.*;

    class Exception {
       public static void main(String[] args) {
          // 입력받은 값을 이름으로 갖는 파일을 생성
          File f = createFile(args[0]);
          System.out.println(f.getName() + " 파일 생성 성공적");
       }
       static File createFile(String fileName) {
          try {
             if (fileName == null || fileName.equals(""))
                throw new Exception("파일이름이 유효하지 않음");
          } catch (Exception e) {
             // fileName이 부적절한 경우 '제목없음.txt'로 생성
             fileName = "제목없음.txt";
          } finally {
             File f = new File(fileName);
             createNewFile(f);
             return f;
          }
       }

       static void createNewFile(File f) {
          try {
             f.createNewFile();
          } catch (Exception e) { }
       }
    }
-> 예외가 발생한 메서드에서 직접 예외를 처리하도록 되어있음
-> main메서드에서는 예외가 발생한 사실을 모름
-> finally블럭에서는 예외 발생여부에 관계없이 파일을 생성
-> 부적절한 파일이름이 입력되면 예외를 발생시키고 catch블럭에서 '제목없음.txt'로 설정

--------------------

ex) import java.io.*;
    
    class Exception {
       public static void main(String[] args) {
          try {
             File f = createFile(args[0]);
             System.out.println(f.getName() + "파일 생성 성공적");
          } catch (Exception e) {
             System.out.println(e.getMessage() + "파일명 재입력");
          }
       }
       
       static File createFile(String fileName) throws Exception {
          if (fileName == null || fileName.equals(""))
             throw new Exception("파일이름이 유효하지 않음");
          File f = new File(fileName);
          f.createNewFile();
          return f;
       }
    }
-> 예외가 발생한 메서드에서 예외를 처리하지않고 호출한 메서드에게 예외를 알려서 파일명을 재입력 받도록 함
-> 호출한 메서드에서 직접 예외를 처리하도록 함

--------------------

finally블럭
-> try-catch문과 함께 예외의 발생여부에 상관없이 실행되어야할 코드를 포함시키는데 사용
-> try-catch문의 끝에 선택적으로 덧붙여 사용. try-catch-finally 순으로 구성
-> try {
      // 예외 발생 가능성이 있는 문장
   } catch (Exception e) {
      // 예외 처리를 위한 문장
   } finally {
      // 예외 발생여부에 관계없이 항상 수행되어야하는 문장
   }
-> 예외가 발생하면 'try catch finally' 순
-> 예외가 발생하지 않으면 'try finally' 순

--------------------

