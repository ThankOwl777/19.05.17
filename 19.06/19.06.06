오버로딩(Overloading)

오버로딩이란
-> 메서드도 변수와 마찬가지로 같은 클래스 내에서 서로 구별이 가능해야하므로, 각기 다른 이름이 필요
-> 자바에서는 메서드 간에 매개변수의 개수 또는 타입이 다르다면 한 클래스 내에 같은 이름을 가진 메서드 선언이 가능
-> 한 클래스 내에 같은 이름의 메서드를 여러 개 정의 하는 것을 '메서드 오버로딩(method overloading)'
-> overloading은 '과적하다'라는 뜻. 즉, 하나의 메서드 이름으로 여러 기능을 구현

오버로딩의 조건
-> 같은 이름의 메서드를 정의한다고 무조건 오버로딩은 아니다
-> 조건
  1. 메서드 이름이 같아야 한다
  2. 매개변수의 개수 또는 타입이 달라야 한다
-> 오버로딩된 메서드들은 매개변수에 의해서만 구별 가능
-> 반환 타입은 오버로딩을 구현하는데 아무런 영향을 주지 못한다

오버로딩의 예
-> 대표적인 예시는 println메서드
-> PrintStream클래스에 정의된 println 메서드
  void println()
  void println(boolean x)
  void println(char x)
  void println(char[] x)
  void println(double x)
  void println(float x)
  void println(int x)
  void println(long x)
  void println(Object x)
  void println(String x)
-> println메서드를 호출할 때 매개변수로 넘겨주는 값의 타입에 따라서 하나가 선택되어 실행

-> 매개변수의 이름만 다르고 매개변수의 타입이 같은 경우 오버로딩 X
-> 매개변수의 이름이 다르면 메서드 내에서 사용되는 변수의 이름만 달라진다

-> 리턴타입만 다른 경우 오버로딩 X
-> 매개변수의 타입과 개수가 일치한다면 어떤 메서드가 호출된 것인지 결정할 수 없기 때문

-> 서로 다른 타입의 매개변수가 하나씩 선언되고 순서가 다른 경우 오버로딩
-> 호출 시 매개변수의 값에 의해 호출될 메서드가 구분될 수 있으므로 오버로딩으로 간주
-> 매개변수의 순서만 다르게 하여 구현하면, 순서를 외우지 않아도 되는 점이 장점이자 단점

오버로딩의 장점
-> 오버로딩을 통해 단일화된 이름만 기억하고 이름도 짧게해서 오류의 가능성을 많이 줄일 수 있다
-> 메서드의 이름만 보고 해당 메서드의 기능을 쉽게 예측할 수 있다
-> 하나의 이름으로 여러 개의 메서드를 정의할 수 있으므로, 단어 선택의 폭을 넓힌다

--------------------

가변인자(varargs)와 오버로딩
-> 메서드의 매개변수 개수가 고정적이었으나 JDK1.5부터 동적으로 지정 가능
-> 가변인자(variable arguments)는 '타입... 변수명'의 형식
-> 가변인자 외에 매개변수가 있다면, 가변인자를 매개변수 중 가장 마지막에 선언

-> 가변인자는 인자의 개수를 가변적으로 사용 가능, 인자 생략 또는 배열도 가능
-> 가변인자는 내부적으로 배열을 이용
-> 가변인자가 선언된 메서드를 호출할 때마다 배열이 새로 생성

-> 매개변수의 타입을 배열로 하는 것과는 다르다
-> 매개변수의 타입을 배열로 하는 것은 반드시 인자를 지정해줘야한다

--------------------

