try-catch문에서의 흐름
-> 예외가 발생한 경우와 발생하지 않은 경우의 흐름(문장의 실행순서)가 달라짐
-> 두 가지 경우에 따른 실행순서
  1. try블럭 내에서 예외가 발생한 경우
    -> 발생한 예외와 일치하는 catch블럭이 있는지 확인
    -> 일치하는 catch블럭을 찾게 되면, 블럭 내의 문장들을 수행
    -> 전체 try-catch문을 빠져나가서 다음 문장을 계속해서 수행
    -> 일치하는 catch블럭을 찾지 못하면, 예외는 처리되지 못함
  2. try블럭 내에서 예외가 발생하지 않은 경우
    -> catch블럭을 거치지 않고 전체 try-catch문을 빠져나가서 수행을 계속
-> try블럭에서 예외가 발생하면, 예외가 발생한 위치 이후에 있는 문장들은 수행되지 않음
-> try블럭에 포함시킬 코드의 범위를 잘 선택해야 함

--------------------

예외의 발생과 catch블럭
-> catch블럭은 괄호()와 블럭{}으로 나누어 짐
-> 괄호()내에는 처리하고자 하는 예외와 같은 타입의 참조변수 하나를 선언

-> 예외가 발생하면, 발생한 예외에 해당하는 클래스의 인스턴스가 생성
-> 예외가 발생한 문장이 try블럭에 포함되어 있다면, 예외를 처리할 수 있는 catch블럭을 찾음
-> 첫번째 catch블럭부터 차례로 내려가면서 검사결과 true인 catch블럭을 만날 때까지 진행
-> catch블럭의 괄호()내에 선언된 참조변수의 종류와 생성된 예외클래스의 인스턴스에 instanceof연산자를 이용해 검사
-> true인 블럭을 찾으면 블럭에 있는 문장들을 모두 수행한 후 예외 처리

-> 모든 예외 클래스는 Exception클래스의 자손
-> catch블럭의 괄호()에 Exception클래스 타입의 참조변수를 선언
-> 어떤 종류의 예외가 발생하더라도 이 catch블럭에 의해서 처리

printStackTrace()와 getMessage()
-> 예외가 발생했을 때 생성되는 예외클래스의 인스턴스에는 발생한 예외에 대한 정보가 담겨져 있음
-> catch블럭의 괄호()에 선언된 참조변수를 통해 인스턴스에 접근이 가능
-> 참조변수는 선언된 catch블럭 내에서만 사용 가능
-> printStackTrace() : 예외발생 당시의 호출스택(Call Stack)에 있었던 메서드의 정보와 예외 메시지를 화면에 출력
-> getMessage() : 발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을 수 있음

멀티 catch블럭
-> JDK1.7부터 여러 catch블럭을 '|'기호를 이용하여, 하나의 catch블럭으로 합칠 수 있게 됨
-> 이를 '멀티 catch블럭'이라고 함
-> try {
      ...
   } catch (ExceptionA | ExceptionB e) {
      e.printStackTrace();
   }

-> 연결된 예외클래스가 조상과 자손의 관계라면 컴파일 에러가 발생함
-> 조상클래스만 써주는 것과 같기 때문
-> 불필요한 코드는 제거하라는 의미에서 에러가 발생

-> 멀티 catch블럭은 하나의 블럭으로 여러 예외를 처리하는 것
-> 멀티 catch블럭 내에서는 실제로 어떤 예외가 발생한 것인지 알 수 없음
-> 참조변수로 조상 예외 클래스에 선언된 멤버만 사용 가능
-> instanceof로 어떤 예외가 발생한 것인지 확인하고 개별적으로 처리하는 것도 가능
-> 멀티 catch블럭에 선언된 참조변수는 상수

--------------------

예외 발생시키기
-> 키워드 throw를 사용해서 고의로 예외를 발생시킬 수 있음
-> 순서
  1. 연산자 new를 이용해 발생시키려는 예외 클래스의 객체를 만듬
    Exception e = new Exception("고의로 발생시킴");
  2. 키워드 throw를 이용해서 예외를 발생시킴
    throw e;
ex) class Exception {
       public static void main(String args[]) {
          try {
             Exception e = new Exception("고의로 발생시킴");
             throw e;
          // throw new Exception("고의로 발생시킴"); // 위 두 줄을 한 줄로 줄임
          } catch (Exception e) {
             System.out.println("에러 메시지 : " + e.getMessage());
             e.printStackTrace();
          }
          System.out.println("프로그램이 정상 종료되었음.");
       }
    }
-> Exception인스턴스를 생성할 때, 생성자에 String을 추가
-> String이 Exception인스턴스에 메시지로 저장
-> getMessage()를 이용해서 이 메시지를 얻을 수 있음

-> Exception클래스들(Exception클래스와 자손들)이 예외를 처리해주지 않으면 컴파일이 되지 않음
-> RuntimeException클래스들에 해당하는 예외는 예외처리를 강제하지 않음
-> 예외처리를 확인하는 Exception클래스들은 'checked예외'
-> 예외처리를 확인하지 않는 RuntimeException클래스들은 'unchecked예외'

--------------------

