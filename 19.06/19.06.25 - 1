유용한 클래스

java.util.Objects클래스
-> Object클래스의 보조 클래스로 Math클래스처럼 모든 메서드가 'static'임
-> 객체의 비교나 널 체크(null check)에 유용함

-> isNull()은 해당 객체가 널인지 확인해서 null이면 true를 반환 아니면 false를 반환함
-> nonNull()은 isNull()과 반대의 일을 함. !Object.isNull(obj)와 같음
-> static boolean isNull(Object obj)
-> static boolean nonNull(Object obj)

-> requireNonNull()은 해당 객체가 널이 아니어야 하는 경우에 사용함
-> 객체가 널이면, NullPointerException을 발생시킴
-> 두 번째 매개변수로 지정하는 문자열은 예외의 메시지
-> static <T> T requireNonNull (T obj)
-> static <T> T requireNonNull (T obj, String message)
-> static <T> T requireNonNull (T obj, Supplier<String> messageSupplier)

-> 매개변수의 유효성 검사
-> void setName(String name) {
      if(name == null)
         throw new NullPointerException("name must not be null.");
         
      this.name = name;
   }
-> void setName(String name) {
      this.name = Objects.requireNonNull(name, "name must not be null.");
   }
-> requireNonNull()의 호출로 간단히 끝낼 수 있게됨

-> Object클래스에는 두 객체의 등가비교를 위한 equals()만 있고, 대소비교를 위한 compare()이 없음
-> Objects에는 compare()가 추가됨
-> compare()는 두 비교대상이 같으면 0, 크면 양수, 작으면 음수를 반환함
-> static int compare(Object a, Object b, Comparator c)
-> 이 메서드는 a와 b 두 객체를 비교

-> Objects클래스에 있는 equals()는 null검사를 하지 않아도 됨
-> Object클래스에 정의된 equals()
-> if(a! = null && a.equals(b)) { // a가 null인지 확인해야 함
      ...
   }
-> Objects클래스에 정의된 equals()
-> if(Objects.equals(a, b)) {     // 매개변수의 값이 null인지 확인할 필요 없음
      ...
   }

-> public static boolean equals(Object a, Object b) {
      return (a == b) || (a != null && a.equals(b));
   }
-> equals()의 내부에서 a와 b의 널 검사를 하기 때문에 따로 널 검사를 위한 조건식이 필요 없음

-> deepEquals()는 객체를 재귀적으로 비교하기 때문에 다차원 배열의 비교도 가능
-> String[][] str2D  = new String[][]{{"aaa", "bbb"}, {"AAA", "BBB"}};
   String[][] str2D2 = new String[][]{{"aaa", "bbb"}, {"AAA", "BBB"}};
   
   System.out.println(Objects.equals(str2D, str2D2));     // false
   System.out.println(Objects.deepEquals(str2D, str2D2)); // true
   
-> toString() 역시 내부적으로 널 검사를 한다는 것 빼고 차이가 없음
-> 두 번째 메서드는 o가 널일 때, 대신 사용할 값을 지정할 수 있음

-> hashCode()는 내부적으로 널 검사를 한 후 Object클래스의 hashCode()를 호출함. 단, 널일 때는 0을 반환함
-> static int hashCode(Object o)
   static int hash(Object... values)
-> 보통 클래스에 선언된 인스턴스의 변수들의 hashCode()를 조합해서 반환하도록 오버라이딩을 함
-> 매개변수의 타입이 가변인자인 두 번째 메서드를 사용하면 편리함

--------------------
Objects예제

ex) import java.util.*;
    import static java.util.Objects.*; // Objects 클래스의 메서드를 static import
    
    class ObjectsEx {
       public static void main(String[] args) {
          String[][] str2D   = new String[][]{{"aaa", "bbb"}, {"AAA", "BBB"}};
          String[][] str2D_2 = new String[][]{{"aaa", "bbb"}, {"AAA", "BBB"}};
    
          System.out.print("str2D = {");
          for (String[] tmp : str2D)
             System.out.print(Arrays.toString(tmp));
          System.out.println("}");
          
          System.out.print("str2D_2 = {");
          for (String[] tmp : str2D_2)
             System.out.print(Arrays.toString(tmp));
          System.out.println("}");
          
          System.out.println("equals(str2D, str2D_2) = " + Objects.equals(str2D, str2D_2));
          System.out.println("deepEquals(str2D, str2D_2) = " + Objects.deepEquals(str2D, str2D_2));
          
          Systme.out.println("isNull(null) = " + isNull(null));
          Systme.out.println("nonNull(null) = " + nonNull(null));
          Systme.out.println("hashCode(null) = " + Objects.hashCode(null));
          Systme.out.println("toString(null) = " + Objects.toString(null));
          Systme.out.println("toString(null, \"\") = " + Objects.toString(null, ""));
          
          Comparator c = String.CASE_INSENSITIVE_ORDER; // 대소문자 구분 안하는 비교
          
          System.out.println("compare(\"aa\", \"bb\") = " + compare("aa", "bb", c));
          System.out.println("compare(\"bb\", \"aa\") = " + compare("bb", "aa", c));
          System.out.println("compare(\"ab\", \"AB\") = " + compare("ab", "AB", c));
       }
    }
-> static import문을 사용해도 Objectㅋ르래스의 메서드와 이름이 같은 것들은 충돌이 발생, 컴파일러가 구분 못함
-> 클래스의 이름을 붙여줘야 함
-> String클래스에 상수로 정의되어 있는 Comparator를 사용해 compare()를 호출

--------------------

