메서드의 호출
-> 메서드를 정의했어도 호출되지 않으면 아무 일도 일어나지 않는다
-> 메서드를 호출하는 방법
   메서드이름(값1, 값2, ...);
   
인자(argument)와 매개변수(parameter)
-> 메서드를 호출할 때 ()안에 지정해준 값들을 '인자(argument)' 또는 '인수'
-> 인자의 개수와 순서는 호출된 메서드에 선언된 매개변수와 일치
-> 인자는 메서드가 호출되면서 매개변수에 대입
-> 인자의 타입은 매개변수의 타입과 일치 또는 자동 형변환이 가능한 것

-> 매개변수의 개수보다 많은 값을 ()에 넣거나 타입이 다른 값을 넣으면 에러 발생

메서드의 실행흐름
-> 같은 클래스 내의 메서드끼리는 참보녀수를 사용하지 않고도 서로 호출이 가능
-> static메서드는 같은 클래스 내의 인스턴스 메서드 호출 불가능

-> 메서드가 호출되면 실행 중이던 메서드는 일시 중지
-> 호출된 메서드의 문장들이 실행
-> 호출된 메서드의 작업이 종료된 후, 기존 메서드로 돌아와 이후 문장들을 실행

-> 메서드는 호출시 넘겨받은 값으로 연산을 수행, 결과를 반환하면서 종료
-> 반환된 값은 대입연사자에 의해서 변수 value에 저장
-> 메서드의 결과를 저장하기 위한 변수 value 역시 반환값과 같은 타입이거나 자동 형변환이 가능한 타입

--------------------

return문
-> 현재 실행중인 메서드를 종료하고 호출한 메서드로 귀환
-> 반환값의 유무에 관계없이 모든 메서드에는 적어도 하나의 return문이 존재
-> 반환타입이 void인 경우, 컴파일러가 메서드의 마지막에 'return;'을 자동적으로 추가
-> 반환값이 있는 경우, 반드시 return문이 존재해야한다
-> return문이 없으면 error: missing return statement가 발생

반환값(return value)
-> return문의 반환값은 주로 변수
-> 수식을 사용할 경우 수식을 계산한 결과가 반환

매개변수의 유효성 검사
-> 매개변수의 값이 적절한 것인지 확인
-> 타입만 맞으면 어떤 값도 매개변수를 통해 넘어 올 수 있다
-> 적절하지 않은 값이 매개변수를 통해 넘어온다면 매개변수의 값을 보정하거나, return문을 사용
-> 유효성 검사는 메서드의 작성에 있어서 중요

--------------------

