생성자 Constructor

생성자
-> 인스턴스가 생성될 때 호출되는 '인스턴스 초기화 메서드'
-> 인스턴스 변수의 초기화 작업에 주로 사용, 인스턴스 생성 시에도 사용

-> 메서드처럼 클래스 내에 선언
-> 메서드와 다르게 리턴값이 없다. 생성자 앞에 아무것도 적지 않는다
-> 생성자의 조건
  1. 생성자의 이름은 클래스의 이름과 같아야 한다
  2. 생성자는 리턴 값이 없다

-> 생성자도 오버로딩이 가능
-> 클래스이름(타입 변수명, 타입 변수명, ...) {
      // 인스턴스 생성 시 수행될 코드
      // 인스턴스 변수의 초기화 코드를 주로 작성
   }
-> 연산자 new가 인스턴스를 생성하는 것
-> 생성자는 인스턴스 생성 X
-> 인스턴스변수 초기화에 사용되는 조금 특별한 메서드
-> 수행과정
  1. 연산자 new에 의해서 메모리(heap)에 클래스의 인스턴스가 생성
  2. 생성자가 호출되어 수행
  3. 연산자 new의 결과로, 생성된 인스턴스의 주소가 반환되어 참조변수에 저장
-> '클래스이름()'이 바로 생성자
-> 인스턴스 생성 시 반드시 클래스 내 정의된 생성자 중 하나를 선택하여 지정

기본생성자(default constructor)
-> 모든 클래스에는 반드시 하나 이상의 생성자가 정의
-> 컴파일러가 '기본 생성자(default constructor)'를 제공

-> 컴파일 시, 소스파일(*.java)의 클래스에 생성자가 정의되지 않은 경우
-> 컴파일러가 자동적으로 기본 생성자를 추가
-> 클래스이름() { }
-> 기본 생성자는 매개변수도 없고 아무런 내용도 없는 간단한 것
-> 기본 생성자가 추가되는 경우는 클래스에 정의된 생성자가 하나도 없을 때만 추가된다

매개변수가 있는 생성자
-> 생성자도 매개변수를 선언하여 인스턴스 초기화 작업에 사용 가능
-> 매개변수가 있는 생성자를 사용할 경우 인스턴스를 생성하는 동시에 초기화 가능

-> 코드를 보다 간결하고 직관적으로 만든다
-> 클래스를 작성할 때 다양한 생성자를 제공하여 인스턴스 생성 후 별도로 초기화를 막는 것이 좋다

생성자에서 다른 생성자 호출하기 - this(), this
-> 생성자 간에도 서로 호출이 가능
-> 단, 두 조건을 만족해야한다
  1. 생성자의 이름으로 클래스이름 대신 this를 사용한다
  2. 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다  
-> 생성자 내에서 초기화 작업도중에 다른 생성자를 호출하게 되면 호출 이전의 작업이 무의미

-> 같은 클래스 내의 생성자들은 일반적으로 서로 관계가 깊은 경우가 많다
-> 서로 호출하도록하여 유기적으로 연결해주면 좋다

-> 'this'는 참조변수로 인스턴스 자신
-> 따라서 'this'로 인스턴스 변수에 접근할 수 있다
-> 'this'는 인스턴트멤버만 사용 가능, static멤버는 사용 불가능

-> 모든 인스턴스메서드에는 참조변수 'this'가 지역변수로 숨겨진 채로 존재

-> this : 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장
-> this(), this(매개변수) : 생성자. 같은 클래스의 다른 생성자를 호출할 때 사용

생성자를 이용한 인스턴스의 복사
-> 현재 사용 중인 인스턴스와 같은 상태를 갖는 인스턴스를 하나 더 만들고자 할 때 이용
-> 두 인스턴스가 같은 상태 = 두 인스턴스의 모든 인스턴스 변수(상태)가 동일한 값을 갖고 있다는 것

-> 하나의 클래스로부터 생성된 모든 인스턴스의 메서드와 클래스변수는 서로 동일
-> 인스턴스간의 차이는, 인스턴스마다 각기 다른 값을 가질 수 있는 인스턴스변수 뿐

-> 어떤 인스턴스의 상태를 알지 못해도 똑같은 상태의 인스턴스를 추가로 생성할 수 있다
-> Java API의 클래스에서 인스턴스의 복사를 위한 생성자를 정의
-> 복사되어 생성된 인스턴스는 서로 같은 상태지만, 독립된 메모리공간에 존재하는 별도의 인스턴스

-> 인스턴스를 생성할 때 결정해야 할 2가지 사항
  1. 클래스 - 어떤 클래스의 인스턴스를 생성할 것인가?
  2. 생성자 - 선택한 클래스의 어떤 생성자로 인스턴스를 생성할 것인가?

--------------------

