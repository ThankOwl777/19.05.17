변수의 초기화

변수의 초기화
-> 변수를 선언하고 처음으로 값을 저장하는 것
-> 경우에 따라 필수적 또는 선택적
-> 선언과 동시에 초기화 하는 것이 바람직

-> 멤버변수는 초기화 하지 않아도 변수의 자료형에 맞는 기본값으로 자동 초기화
-> 지역변수는 사용하기 전에 반드시 초기화
-> 멤버변수(클래스변수와 인스턴스변수)와 배열의 초기화는 선택적, 지역변수의 초기화는 필수적

--------------------
변수의 초기화의 예시

1. int i = 10;
   int j = 10;
-> 각각 선언 후 초기화

2. int i = 10, j = 10;
-> 같은 타입의 변수는 ','를 사용하여 함께 선언하거나 초기화 가능

3. int i = 10, long j = 10;
-> Error. 타입이 다른 변수는 함께 선언하거나 초기화 할 수 없다

4. int i = 10;
   int j = i;
-> 변수 i에 저장된 값으로 j를 초기화

5. int j = i;
   int i = 10;
-> Error. 변수 i가 선언되기 전에 사용할 수 없다
--------------------

-> 멤버변수의 초기화 방법
  1. 명시적 초기화(explicit initialization)
  2. 생성자(constructor)
  3. 초기화 블럭(initialization block) : 인스턴스 초기화 블럭, 클래스 초기화 블럭

명시적 초기화 explicit initialization
-> 변수를 선언과 동시에 초기화하는 것

초기화 블럭 initialization block
-> '클래스 초기화 블럭'과 '인스턴스 초기화 블럭' 두 가지 종류
-> '클래스 초기화 블럭'은 클래스변수의 초기화에 사용
-> '인스턴스 초기화 블럭'은 인스턴스변수의 초기화에 사용

-> 인스턴스 초기화 블럭은 클래스 내에 블럭{}을 만들고 그 안에 코드를 작성
-> 클래스 초기화 블럭은 인스턴스 초기화 블럭 앞에 static을 덧붙이기
-> 초기화 블럭 내에서 조건문, 반복문, 예외처리구문 등을 자유롭게 사용 가능

-> 클래스 초기화 블럭은 클래스가 메모리에 처음 로딩될 때 한번만 수행
-> 인스턴스 초기화 블럭은 생성자와 같이 인스턴스를 생성할 때 마다 수행
-> 생성자보다 인스턴스 초기화 블럭이 먼저 수행

-> 인스턴스 변수의 초기화는 주로 생성자를 사용
-> 인스턴스 초기화 블럭은 모든 생성자에서 공통으로 수행되는 코드를 넣는데 사용
-> 코드의 중복을 제거하여 신뢰성을 높여주고, 오류 발생의 가능성을 줄여 준다

-> 배열이나 예외처리가 필요한 초기화에서 명시적 초기화만으로는 작업이 불가능
-> 이런 경우에 추가적으로 클래스 초기화 블럭을 사용

--------------------

멤버변수의 초기화 시기와 순서
-> 클래스변수의 초기화시점 : 클래스가 처음 로딩될 때 단 한번
-> 인스턴스변수의 초기화시점 : 인스턴스가 생성될 때마다

-> 클래스변수의 초기화순서 : 기본값 >> 명시적초기화 >> 클래스 초기화 블럭
-> 인스턴스변수의 초기화순서 : 기본값 >> 명시적초기화 >> 인스턴스 초기화 블럭 >> 생성자

-> 프로그램 실행도중 클래스에 대한 정보를 요구할 때, 클래스는 메모리에 로딩
-> 해당 클래스가 이미 메모리에 로딩되어 있다면, 재로딩 하지 않는다

--------------------

