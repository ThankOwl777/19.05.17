상속 inheritance

상속의 정의와 장점
-> 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것
-> 상속을 이용하면 적은 양의 코드로 새로운 클래스를 작성 가능
-> 코드를 공통적으로 관리, 코드의 추가 및 변경이 매우 용이

-> 구현방법
-> class 클래스이름1 extends 클래스이름2 { }
-> 새로 작성하고자하는 클래스의 이름 뒤에 상속받고자 하는 클래스의 이름을 extends와 함께 작성
-> 상속해주는 클래스를 '조상 클래스', 상속 받는 클래스를 '자손 클래스'

-> 조상 클래스 : 부모(parent)클래스, 상위(super)클래스, 기반(base)클래스
-> 자손 클래스 : 자식(child)클래스, 하위(sub)클래스, 파생된(derived)클래스

-> 자손 클래스는 조상 클래스의 모든 멤버를 상속, 포함
-> 조상 클래스가 변경되면 자손 클래스에 자동적으로 영향
-> 자손 클래스가 변경되도 조상 클래스에는 영향이 없다

-> 자손 클래스는 조상 클래스의 모든 멤버를 상속받으므로 같거나 많은 멤버를 소유
-> 상속이 거듭될수록 상속받는 클래스의 멤버 개수는 증가
-> 상속에 사용되는 키워드가 extends인 이유

-> 생성자와 초기화 블럭은 상속되지 않고 멤버만 상속
-> 자손 클래스의 멤버 개수가 조상 클래스보다 항상 같거나 많다

-> 하나의 조상 클래스에 여러 개의 자손 클래스 가능
-> 자손 클래스는 서로 아무런 관계가 없다
-> 같은 내용의 코드를 하나 이상의 클래스에 추가해야하는 경우 상속관계를 이용

-> 자손 클래스의 인스턴스를 생성하면 조상 클래스의 멤버와 자손 클래스의 멤버가 합쳐진 하나의 인스턴스로 생성

클래스간의 관계 - 포함관계
-> 상속이외에 클래스를 재사용하는 다른 방법
-> 한 클래스의 멤버변수로 다른 클래스 타입의 참조변수를 선언하는 것

-> 하나의 거대한 클래스를 작성하는 것은 비효율
-> 여러 개의 클래스를 작성한 다음, 이 단위 클래스들을 포함관계로 재사용
-> 작성하기 쉽고 코드도 간결하여 이해하기 쉽다

클래스간의 관계 결정
-> 클래스 작성에 있어 상속관계와 포함관계 선택은 중요
-> 클래스를 가지고 문장을 만들어서 비교
-> 상속관계 : ~은 ~이다
-> 포함관계 : ~은 ~을 가지고 있다
-> 매번 성립하지는 않지만 기본적인 비교는 가능

--------------------

단일 상속(single inheritance)
-> C++에서는 여러 조상 클래스로부터 상속받는 것이 가능한 '다중상속(multiple inheritance)'을 허용
-> 자바에서는 단일 상속만을 허용
-> 다중상속은 클래스 간의 관계가 복잡해지고, 상속받은 멤버간의 이름이 같은 경우 구별이 불가능하다는 단점
-> 단일상속은 클래스 간의 관계가 명확하고, 코드의 신뢰성이 높다는 점에서 유리

--------------------

Object클래스 - 모든 클래스의 조상
-> 모든 클래스의 상속계층도 최상위에 있는 조상클래스
-> 다른 클래스로부터 상속 받지 않는 모든 클래스들은 Object클래스로부터 자동 상속
-> 상속을 받지 않는 클래스는 컴파일러가 자동으로 'extends Object'를 추가
-> 상속을 받도록 작성된 클래스는 컴파일러가 'extends Object'를 추가하지 않는다

-> 모든 클래스의 조상클래스를 따라 올라가면 최상위는 Object클래스
-> 자바의 모든 클래스들은 Object클래스에 정의된 멤버를 사용 가능
-> toString(), equals(Object o)와 같은 메서드

--------------------

