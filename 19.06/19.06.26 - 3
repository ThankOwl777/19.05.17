java.math.BigDecimal클래스
-> double타입의 정밀도가 최대 13자리이고 실수형의 특성상 오차를 피할 수 없음
-> BigDecimal은 정수를 이용해 실수를 표현함
-> 실수를 정수와 10의 제곱의 곱으로 표현

-> scale은 0부터 Integer.MAX_VALUE사이의 범위에 있는 값
-> BigDecimal은 정수를 저장하는데 BigInteger를 사용
-> private final BigInteger intVal; // 정수(unscaled value)
   private final int scale;         // 지수(scale)
   private transient int precision; // 정밀도(precision) - 정수의 자리수

BigDecimal의 생성
-> 문자열로 숫자를 표현하는 것이 일반적. 기본형 리터럴로는 표현할 수 있는 값의 한계가 있기 때문
-> BigDecimal val;
   val = new BigDecimal("123.4567890");  // 문자열로 생성
   val = new BigDecimal(123.456);        // double타입의 리터럴로 생성
   val = new BigDecimal(123456);         // int, long타입의 리터럴로 생성가능
   val = BigDecimal.valueOf(123.456);    // 생성자 대신 valueOf(double) 사용
   val = BigDecimal.valueOf(123456);     // 생성자 대신 valueOf(int) 사용
-> double타입의 값을 매개변수로 갖는 생성자를 사용하면 오차가 발생할 수 있음

다른 타입으로의 변환
-> 문자열로 변환하는 메서드
-> String toPlainString()   // 어떤 경우에도 다른 기호없이 숫자로만 표현
   String toString()        // 필요하면 지수형태로 표현할 수도 있음
-> 지수형태의 리터럴을 사용했을 때 다른 결과를 얻는 경우가 있음

-> Number로부터 상속받은 기본형으로 변환하는 메서드
-> int    intValue()
   long   longValue()
   float  floatValue()
   double doubleValue()

-> 정수형으로 변환하는 메서드 중 끝에 'Exact'가 붙은 것
-> byte       byteValueExact()
   short      shortValueExact()
   int        intValueExact()
   long       longValueExact()
   BigInteger toBigIntegerExact()

--------------------

BigDecimal의 연산
-> 실수형에 사용할 수 있는 모든 연산자와 수학적인 계산을 쉽게 해주는 메서드들이 정의
-> 기본적인 연산을 수행하는 메서드
-> BigDecimal add(BigDecimal val)       // 덧셈(this + val)
   BigDecimal subtract(BigDecimal val)  // 뺄셈(this - val)
   BigDecimal multiply(BigDecimal val)  // 곱셈(this * val)
   BigDecimal divide(BigDecimal val)    // 나눗셈(this / val)
   BigDecimal remainder(BigDecimal val) // 나머지(this % val)
-> 불변이므로, 반환타입이 BigDecimal인 경우 새로운 인스턴스가 반환됨

반올림 모드 - divide()와 setScale()
-> 다른 연산과 달리 나눗셈을 처리하기 위한 메서드는 다양한 버젼이 존재함
-> 나눗셈의 결과를 어떻게 반올림(roundingMode)처리할 것인가
-> 몇 번째 자리(scale)에서 반올림할 것인가
-> BigDecimal divide(BigDecimal divisor)
   BigDecimal divide(BigDecimal divisor, int roundingMode)
   BigDecimal divide(BigDecimal divisor, RoundingMode roundingMode)
   BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)
   BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)
   BigDecimal divide(BigDecimal divisor, MathContext mc)

-> roundingMode는 반올림 처리방법에 대한 것
-> BigDecimal에 정의된 'ROUND_'로 시작하는 상수들 중에 하나를 선택해서 사용

-> 열거형 RoundingMode에 정의된 상수
-> CEILING : 올림
-> FLOOR : 내림
-> UP : 양수일 때는 올림, 음수일 때는 내림
-> DOWN : 양수일 때는 내림, 음수일 때는 올림
-> HALF_UP : 반올림(5이상 올림, 5미만 버림)
-> HALF_EVEN : 반올림(반올림 자리의 값이 짝수면 HALF_DOWN, 홀수면 HALF_UP)
-> HALF_DOWN : 반올림(6이상 올림, 6미만 버림)
-> UNNECESSARY : 나눗셈의 결과가 딱 떨어지는 수가 아니면, ArithmeticException발생

--------------------

java.math.MathContext
-> 반올림 모드와 정밀도(precision)을 하나로 묶어 놓은 것
-> divide()에서는 scale이 소수점 이하의 자리수를 의미
-> MathContext에서는 precision이 정수와 소수점 이하를 모두 포함한 자리수를 의미

scale의 변경
-> BigDecimal을 10으로 곱하거나 나누는 대신 scale의 값을 변경함으로써 같은 결과를 얻을 수 있음
-> setScale()을 이용
-> BigDecimal setScale(int newScale)
   BigDecimal setScale(int newScale, int roundingMode)
   BigDecimal setScale(int newScale, RoundingMode mode)
-> setScale()로 scale을 값을 줄이는 것은 10의 n제곱으로 나누는 것과 같음
-> divide()를 호출할 때처럼 오차가 발생할 수 있고 반올림 모드를 지정해 주어야 함

--------------------

