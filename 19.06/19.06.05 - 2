클래스 메서드(static 메서드)와 인스턴스 메서드
-> 메서드 앞에 static이 붙어 있으면 클래스 메서드, 없으면 인스턴스 메서드
-> 클래스 메서드는 객체를 생성하지 않고 '클래스이름.메서드이름(매개변수)'와 같은 식으로 호출이 가능
-> 인스턴스 메서드는 객체가 반드시 필요

-> 인스턴스 메서드는 메서드의 작업을 수행하는데 인스턴스 변수가 필요
-> 인스턴스(객체)를 생성해야만 호출이 가능
-> 인스턴스와 관계없는 메서드를 클래스 메서드(static 메서드)로 정의

-> 정리
  1. 클래스를 설계할 때, 멤버변수 중 모든 인스턴스에 공통으로 사용하는 것에 static을 붙인다
    -> 생성된 각 인스턴스는 서로 독립적
    -> 각 인스턴스의 변수는 서로 다른 값을 유지
    -> 모든 인스턴스에서 같은 값이 유지되어야하는 변수는 static을 붙여서 클래스변수로 정의
    
  2. 클래스 변수(static 변수)는 인스턴스를 생성하지 않아도 사용할 수 있다
    -> static이 붙은 변수(클래스 변수)는 클래스가 메모리에 올라갈 때 자동적으로 생성
  
  3. 클래스 메서드(static 메서드)는 인스턴스 변수를 사용할 수 없다
    -> 인스턴스 변수는 인스턴스가 반드시 존재해야만 사용 가능
    -> 클래스 메서드는 인스턴스 생성 없이 호출가능
    -> 클래스 메서드가 호출되었을 때 인스턴스가 존재하지 않을 수도 있다
    -> 인스턴스 변수나 인스턴스 메서드에서 static이 붙은 멤버 사용은 가능
    -> 인스턴스 변수가 존재한다는 것은 static변수가 이미 메모리에 존재한다는 것을 의미
    
  4. 메서드 내에서 인스턴스 변수를 사용하지 않는다면, static을 붙이는 것을 고려한다
    -> 인스턴스변수가 필요하다면, static을 붙일 수 없다
    -> 인스턴스변수가 필요없다면, static을 붙이는 것을 고려
    -> 메서드 호출시간이 짧아지므로 성능이 향상

-> 클래스의 멤버변수 중 모든 인스턴스에 공통된 값을 유지해야하는 것이 있다면 static을 붙여준다
-> 작성한 메서드 중에서 인스턴스 변수나 인스턴스 메서드를 사용하지 않는 메서드에 static을 붙일 것을 고려한다

--------------------

클래스 멤버와 인스턴스 멤버간의 참조와 호출
-> 같은 클래스에 속한 멤버간의 참조 또는 호출이 가능
-> 단 클래스멤버가 인스턴스멤버를 참조 또는 호출 할 경우, 인스턴스 생성이 필요

-> 클래스멤버(클래스변수와 클래스메서드)는 언제나 참조 또는 호출이 가능
-> 인스턴스멤버가 클래스멤버를 사용하는 것은 자유
-> 클래스멤버 간의 참조 또는 호출도 자유
-> 클래스멤버가 인스턴스멤버를 참조, 호출하기 위해서는 객체 생성 필요
-> 인스턴스멤버간의 호출은 자유
-> 인스턴스멤버가 존재한다는 것은 인스턴스가 이미 생성되었다는 것을 의미

--------------------

