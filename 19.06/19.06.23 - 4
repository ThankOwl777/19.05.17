StringBuffer클래스와 StringBuilder클래스

StringBuffer클래스
-> StringBuffer클래스는 String클래스와 달리 지정된 문자열을 변경할 수 있음
-> 내부적으로 문자열 편집을 위한 버퍼(buffer)를 가지고 있으며, StringBuffer인스턴스를 생성할 때 그 크기를 지정할 수 있음
-> StringBuffer클래스는 String클래스와 유사한 점이 많음
-> public final class StringBuffer implements java.io.Serializable {
      private char[] value;
      ...
   }
-> String클래스와 같이 문자열을 저장하기 위한 char형 배열의 참조변수를 인스턴스변수로 선언
-> 인스턴스가 생성될 때, char형 배열이 생성되며 생성된 배열을 인스턴스변수 value가 참조하게 됨

StringBuffer의 생성자
-> 인스턴스를 생성할 때, 적절한 길이의 char형 배열이 생성됨
-> 이 배열은 문자열을 저장하고 편집하기 위한 공간(buffer)으로 사용됨

-> 인스턴스 생성 시 생성자 StringBuffer(int length)를 사용
-> StringBuffer인스턴스에 저장될 문자열의 길이를 고려하여 여유있는 크기로 지정하는 것이 좋음
-> 버퍼의 크기를 지정해주지 않으면 16개의 문자를 저장할 수 있는 크기의 버퍼를 생성함

ex) public StringBuffer(int length) {
       value = new char[length];
       shared = false;
    }
    
    public String Buffer() {
       this(16); // 버퍼의 크기를 지정하지 않으면 16이 됨
    }
    
    public StringBuffer(String str) {
       this(str.length() + 16); // 지정한 문자열의 길이보다 16만큼 더 크게 버퍼를 생성함
       append(str);
    }
    
-> StringBuffer클래스의 일부. 버퍼의 크기를 변경하는 내용의 코드
-> ...
   // 새로운 길이(newCapacity)의 배열을 생성함. newCapacity는 정수값.
   char newValue[] = new char[newCapacity];
   
   // 배열 value의 내용을 배열 newValue로 복사함.
   System.arraycopy(value, 0, newValue, 0, count); // count는 문자열의 길이.
   value = newValue; // 새로 생성된 배열의 주소를 참조변수 value에 저장.
-> StringBuffer인스턴스로 문자열을 다루는 작업을 할 때
-> 버퍼의 크기가 작업하려는 문자열의 길이보다 작을 때는 내부적으로 버퍼의 크기를 증가시키는 작업이 수행됨
-> 배열의 길이는 변경될 수 없으므로 새로운 길이의 배열을 생성한 후 이전 배열의 값을 복사해야 함
-> 이렇게 함으로써 StringBuffer클래스의 인스턴스변수 value는 길이가 증가된 새로운 배열을 참조하게 됨

--------------------

StringBuffer의 변경
-> StringBuffer는 내용을 변경할 수 있음
-> StringBuffer sb = new StringBuffer("abc");
   sb.append("123");
   StringBuffer sb2 = sb.append("ZZ");
   System.out.println(sb);
   System.out.println(sb2);
-> sb와 sb2가 모두 같은 StringBuffer인스턴스를 가리키고 있으므로 같은 내용이 출력됨
-> 하나의 StringBuffer인스턴스에 대해 연속적으로 append()를 호출하는 것이 가능함
-> StringBuffer sb = new StringBuffer("abc");
   sb.append("123").append("ZZ");
-> append()의 반환타입이 void라면 불가능

--------------------

StringBuffer의 비교
-> String클래스에서는 equals메서드를 오버라이딩해서 문자열의 내용을 비교하도록 구현
-> StringBuffer클래스는 equals메서드를 오버라이딩하지 않음
-> 따라서 등가비교연산자(==)로 비교한 것과 같은 결과를 얻음
ex) StringBuffer sb = new StringBuffer("abc");
    StringBuffer sb2 = new StringBuffer("abc");
    
    System.out.println(sb == sb2);      // false
    System.out.println(sb.equals(sb2)); // false
    
-> toString()은 오버라이딩되어 있어서 StringBuffer인스턴스에 toString()을 호출하면 담고있는 문자열을 String으로 반환함
-> 문자열을 비교하기 위해서는 toString()을 호출해서 String인스턴스를 얻은 다음, 여기에 equals메서드를 사용해서 비교해야함
ex) String s = sb.toString();
    String s2 = sb2.toString();
    
    System.out.println(s.equals(sb2)); // true
    
--------------------

