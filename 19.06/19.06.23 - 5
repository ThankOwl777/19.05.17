StringBuffer클래스의 생성자와 메서드
--------------------
-> StringBuffer() : 16문자를 담을 수 있는 버퍼를 가진 StringBuffer인스턴스를 생성함
  ex) StringBuffer sb = new StringBuffer();
  => sb = ""
  
-> StringBuffer(int length) : 지정된 개수의 문자를 담을 수 있는 버퍼를 가진 StringBuffer인스턴스를 생성함
  ex) StringBuffer sb = new StringBuffer(10);
  => sb = ""
  
-> StringBuffer(String str) : 지정된 문자열 값(str)을 갖는 StringBuffer인스턴스를 생성함
  ex) StringBuffer sb = new StringBuffer("Hello");
  => sb = "Hello"
  
-> StringBuffer append(boolean b)
   StringBuffer append(char c)
   StringBuffer append(char[] str)
   StringBuffer append(double d)
   StringBuffer append(float f)     : 매개변수로 입력된 값을 문자열로 변환하여 StringBuffer인스턴스가 저장하고
   StringBuffer append(int i)         있는 문자열 뒤에 덧붙임
   StringBuffer append(long l)
   StringBuffer append(Object obj)
   StringBuffer append(String str)
  ex) StringBuffer sb = new StringBuffer("abc");
      StringBuffer sb2 = sb.append(true);
      ab.append('d').append(10.0f);
      
      StringBuffer sb3 = sb.append("ABC").append(123);
  => sb = "abctrued10.0ABC123" 
     sb2 = "abctrued10.0ABC123" 
     sb3 = "abctrued10.0ABC123" 
     
-> int capacity() : StringBuffer인스턴스의 버퍼크기를 알려줌. length()는 버퍼에 담긴 문자열의 길이를 알려줌.
  ex) StringBuffer sb = new StringBuffer(100);
      sb.append("abcd");
      int bufferSize = sb.capacity();
      int stringSize = sb.length();
  => bufferSize = 100
     stringSize = 4 // sb에 담긴 문자열이 'abcd'이므로
     
-> char charAt(int index) : 지정된 위치(index)에 있는 문자를 반환함
  ex) StringBuffer sb = new StringBuffer("abc");
      char c = sb.charAt(2);
  => c = 'c'
  
-> StringBuffer delete(int start, int end) : 시작위치와 끝 위치 사이에 있는 문자를 제거. 단, 끝 위치의 문자는 제외.
  ex) StringBuffer sb = new StringBuffer("0123456");
      StringBuffer sb2 = sb.delete(3, 6);
  => sb = "0126"
     sb2 = "0126"
     
-> StringBuffer deleteCharAt(int index) : 지정된 위치(index)의 문자를 제거함
  ex) StringBuffer sb = new StringBuffer("0123456");
      sb.deleteCharAt(3);
  => sb = "012456"
  
-> StringBuffer insert(int pos, boolean b)
   StringBuffer insert(int pos, char c)
   StringBuffer insert(int pos, char[] str)
   StringBuffer insert(int pos, double b)
   StringBuffer insert(int pos, float f)     : 두 번째 매개변수로 받은 값을 문자열로 변환하여
   StringBuffer insert(int pos, int i)         지정된 위치(pos)에 추가함. pos는 0부터 시작.
   StringBuffer insert(int pos, long l)
   StringBuffer insert(int pos, Object obj)
   StringBuffer insert(int pos, String str)
  ex) StringBuffer sb = new StringBuffer("0123456");
      sb.insert(4, '.');
  => sb = "0123.456"
  
-> int length() : StringBuffer인스턴스에 저장되어 있는 문자열의 길이를 반환함
  ex) StringBuffer sb = new StringBuffer("0123456")
      int length = sb.length;
  => length = 7
  
-> StringBuffer replace(int start, int end, String str) : 지정된 범위의 문자들을 주어진 문자열로 바꿈. end위치 문자는 미포함.
  ex) StringBuffer sb = new StringBuffer("0123456");
      sb.replace(3, 6, "AB")
  => sb = "012AB6"

-> StringBuffer reverse() : StringBuffer인스턴스에 저장되어 있는 문자열의 순서를 거꾸로 나열함
  ex) StringBuffer sb = new StringBuffer("0123456");
      sb.reverse();
  => sb = "6543210"
  
-> void setCharAt(int index, char ch) : 지정된 위치의 문자를 주어진 문자(ch)로 바꿈
  ex) StringBuffer sb = new StringBuffer("0123456");
      sb.setCharAt(5, 'o');
  => sb = "01234o6"
  
-> void setLength(int newLength) : 지정된 길이로 문자열의 길이를 변경함. 길이를 늘리는 경우 빈 공간을 널문자로 채움.
  ex) StringBuffer sb = new StringBuffer("0123456");
      sb.setLength(5);
      
      StringBuffer sb2 = new StringBuffer("0123456");
      sb2.setLength(10);
      String str = sb2.toString().trim();
  => sb  = "01234"
     sb2 = "0123456   "
     str = "0123456"

-> String toString() : StringBuffer인스턴스의 문자열을 String으로 반환
  ex) StringBuffer sb = new StringBuffer("0123456");
      String str = sb.toString();
  => str = "0123456"

-> String substring(int start)           : 지정된 범위 내의 문자열을 String으로 뽑아서 반환함.
   String substring(int start, int end)    시작위치만 지정하면 시작위치부터 문자열 끝까지 뽑아서 반환함.
  ex) StringBuffer sb = new StringBuffer("0123456");
      String str  = sb.substring(3);
      String str2 = sb.substring(3, 5);
  => str  = "3456"
     str2 = "34"
     
--------------------

StringBuilder클래스
-> StringBuffer는 멀티쓰레드에 안전(thread safe)하도록 동기화되어 있음
-> StringBuilder는 StringBuffer에서 쓰레드의 동기화만 뺀 것
-> 완전히 똑같은 기능으로 작성되어 있어, 소스코드에서 StringBuffer를 StringBuilder로 바꾸기만하면 됨

--------------------

