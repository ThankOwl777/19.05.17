예외처리 exception handling

프로그램 오류
-> 프로그램이 실행 중 어떤 원인에 의해 오작동하거나 비정상적으로 종료되는 경우
-> 결과를 초래하는 원인을 프로그램 에러 또는 오류라고 함

-> 발생시점에 따라 '컴파일 에러(compile-time error)'와 '런타임 에러(runtime error)'로 나눔
-> 컴파일 에러(compile-time error)는 컴파일 할 때 발생하는 에러
-> 런타임 에러(runtime error)는 프로그램의 실행도중에 발생하는 에러
-> 이 외에 의도한 것과 다르게 동작하는 '논리적 에러(logical error)'가 존재

-> 소스코드를 컴파일 하면 컴파일러가 소스코드(*.java)에 대해 기본적인 검사를 수행하여 오류를 확인
-> 에러를 수정해서 컴파일을 성공적으로 마치면, 클래스파일(*.class)이 생성되고 실행할 수 있게 됨

-> 컴파일을 에러없이 마쳤다고 프로그램 실행 시 에러가 발생하지 않는 것은 아님
-> 실행도중 발생하는 에러는 컴파일러가 검사할 수 없기 때문
-> 컴파일이 잘 되어도 실행 중 에러로 인해 잘못된 결과를 얻거나 비정상적으로 종료될 수 있음

-> 런타임 에러 방지를 위해서는 발생할 수 있는 모든 경우의 수를 고려하여 대비 해야함
-> 자바에서는 실행 시(runtime) 발생할 수 있는 오류를 '에러(error)'와 '예외(exception)'으로 구분

-> error는 메모리부족(OutOfMemoryError)이나 스택오버플로우(StackOverflowError) 등등
-> 발생하면 복구할 수 없는 심각한 오류
-> exception은 발생하더라도 수습할 수 있는 비교적 덜 심각한 것

--------------------

예외 클래스의 계층구조
-> 실행 시 발생할 수 있는 오류(Exception과 Error)를 클래스로 정의
-> 모든 클래스의 조상은 Object클래스
-> Exception과 Error클래스 역시 Object클래스의 자손

-> 모든 '예외'의 최고 조상은 Exception클래스
-> 예외 클래스는 두 그룹으로 나눌 수 있음
  1. Exception클래스와 그 자손들(RuntimeException과 자손 제외)
  2. RuntimeException클래스와 그 자손들

-> Exception클래스들은 주로 외부의 영향으로 발생할 수 있는 것
-> 대부분 프로그램 사용자의 동작에 의해서 발생
-> 존재하지 않는 파일의 이름을 입력(FileNotFoundException)
-> 실수로 클래스의 이름을 잘못 입력(ClassNotFoundException)
-> 입력한 데이터의 형식이 잘못됨(DataFormatException)

-> RuntimeException클래스들은 주로 프로그래머의 실수에 의해 발생할 수 있는 것
-> 자바의 프로그래밍 요소들과 관계가 깊음
-> 배열의 범위를 벗어남(ArrayIndexOutOfBoundsException)
-> 값이 null인 참조변수의 멤버를 호출하려함(NullPointerException)
-> 클래스간의 형변환을 잘못함(ClassCastException)
-> 정수를 0으로 나누려고함(ArithmeticException)

--------------------

예외처리하기 try-catch문
-> 프로그램 실행도중 발생하는 에러는 불가피, 예외는 프로그래머가 사전에 처리해야 함

-> 예외처리(exception handling)이란, 예외의 발생에 대비한 코드를 작성하는 것
-> Exception handling의 목적
  1. 예외의 발생으로 인한 프로그램의 비정상적인 종료를 막는 것
  2. 정상적인 실행상태를 유지할 수 있도록 하는 것

-> 발생한 예외를 처리하지 못하면 프로그램은 비정상적으로 종료
-> 처리되지 못한 예외(uncaught exception)는 JVM의 '예외처리기(UncaughtExceptionHandler)'가 받아 원인을 화면에 출력함

-> 예외를 처리하기 위해서는 try-catch문을 사용. 구조는 다음과 같음
-> try {
      // 예외 발생 가능성이 있는 문장
   } catch (Exception1 e1) {
      // Exception1이 발생했을 경우, 처리하는 문장
   } catch (Exception2 e2) {
      // Exception2가 발생했을 경우, 처리하는 문장
   } catch (ExceptionN eN) {
      // ExceptionN이 발생했을 경우, 처리하는 문장
   }
-> 하나의 try블럭 다음에는 여러 종류의 예외를 처리하기 위한 catch블럭이 하나 이상 옴
-> 이 중 발생한 예외의 종류와 일치하는 단 한 개의 catch블럭만 수행됨
-> 발생한 예외의 종류와 일치하는 catch블럭이 없으면 예외는 처리되지 않음

-> 하나의 메서드 내에 여러 개의 try-catch문이 사용될 수 있음
-> try블럭 또는 catch블럭에 또 다른 try-catch문이 포함 될 수 있음
-> cathc블럭 내의 코드에서도 예외가 발생할 수 있기 때문

-> catch블럭의 괄호 내에 선언된 변수는 catch블럭 내에서만 유효
-> 또 하나의 try-catch문이 포함된 경우, 같은 이름의 참조변수를 사용해서는 안 됨
-> 각 catch블럭에 선언된 두 참조변수의 영역이 서로 겹치므로 다른 이름을 사용해야만 구별됨

--------------------

-> ArithmeticException은 산술연산과정에서 오류가 있을 때 발생하는 예외
-> 정수를 0으로 나누는 것은 금지. 실수를 0으로 나누는 것은 금지되어 있지 않음

--------------------

