추상클래스 abstract class
 
추상클래스
-> 클래스를 설계도에 비유하면, 추상클래스는 미완성 설계도
-> 클래스가 미완성이라는 것은 미완성 메서드(추상메서드)를 포함하고 있다는 의미

-> 추상클래스로 인스턴스 생성 불가
-> 상속을 통해서 자손클래스에 의해서만 완성 가능

-> 추상클래스 자체로는 클래스로서의 역할 부족, 대신 새로운 클래스의 조상클래스로서 중요한 의미

-> 키워드 'abstract'를 붙이면 추상클래스
-> abstract class 클래스이름 {
      ...
   }
-> 선언부의 abstract를 보고 추상메서드가 있으니 상속을 통해 구현해주어야 한다는 것을 파악

-> 추상클래스에도 생성자가 있으며, 멤버변수와 메서드도 가질 수 있다

--------------------
 
추상메서드(abstract method)
-> 메서드는 선언부와 구현부로 구성
-> 선언부만 작성하고 구현부는 작성하지 않은 채로 남겨 둔 메서드

-> 조상클래스에서 선언부만 작성, 주석을 덧붙여 수행 목적을 작성
-> 자손 클래스에서 실제 내용을 구현
-> 메서드의 내용이 상속받는 클래스에 따라 달라질 수 있기 때문

-> /* 주석을 통해 어떤 기능을 수행할 목적으로 작성하였는지 설명한다 */
   abstract 리턴타입 메서드이름();
-> 구현부가 없으므로 {}대신 ;를 작성

-> 추상클래스로부터 상속받는 자손클래스는 오버라이딩을 통해 추상메서드를 구현
-> 하나라도 구현하지 않는다면, 자손클래스 역시 추상클래스로 지정

-> 메서드를 사용하는 쪽은 선언부만 알고 있으면 되므로 추상메서드를 사용하는 코드 작성이 가능
-> 실제로는 자손 클래스에 구현된 완성된 메서드가 호출된다

--------------------

추상클래스의 작성
-> 여러 클래스에서 공통적으로 사용될 수 있는 클래스를 바로 작성
-> 기존의 클래스의 공통적인 부분을 뽑아 추상클래스로 만들어 상속

-> 상속 : 자손 클래스를 만드는데 조상 클래스를 사용
-> 추상화 : 기존 클래스의 공통부분을 뽑아 조상 클래스를 생성

-> 상속계층도에서 올라가면 추상화, 내려오면 구체화
-> 추상화 : 클래스간의 공통점을 찾아내서 공통의 조상을 만드는 작업
-> 구체화 : 상속을 통해 클래스를 구현, 확장하는 작업

추상메서드를 선언하는 이유
-> 추상메서드로 선언하는 것과 내용없는 빈 몸통만 만들어 놓는 것의 차이가 없어보임
-> 어차피 자손클래스에서 오버라이딩하여 자신의 클래스에 맞게 구현
-> 굳이 abstract를 붙여서 선언하는 이유는 자손클래스에서 추상메서드를 구현하도록 강요하기 위해서
-> 빈 몸통만 있다면 자손클래스에서 완성된 것으로 인식하고 오버라이딩을 수행 안할 수도 있음!

--------------------

