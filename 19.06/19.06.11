package와 import

패키지 package
-> 클래스의 묶음
-> 클래스 또는 인터페이스를 포함시킬 수 있다
-> 관련된 클래스들끼리 그룹 단위로 묶어 효율적으로 관리
-> 같은 이름의 클래스도 서로 다른 패키지에 존재하는 것이 가능

-> 클래스의 실제 이름(full name)은 패키지명을 포함한 것
-> 패키지명.클래스이름
-> 같은 이름의 클래스도 패키지명으로 구별이 가능

-> 클래스는 물리적으로 하나의 클래스파일(*.class)
-> 패키지는 물리적으로 하나의 디렉토리
  ex)java.lang.String : java디렉토리의 lang서브디렉토리에 속한 String클래스파일
-> 패키지는 다른 패키지를 포함할 수 있다

패키지의 선언
-> package 패키지명;
-> 패키지 선언문은 반드시 주석과 공백을 제외한 첫 번째 문장이어야 한다
-> 하나의 소스파일에 단 한번만 선언 가능

-> 패키지명은 대소문자 모두 허용, 클래스와 구분하기 위해 소문자로 하는 것이 원칙

-> 모든 클래스는 반드시 하나의 패키지에 포함
-> 패키지를 선언하지 않으면 자바에서 '이름없는 패키지(unnamed package)'를 제공
-> 패키지를 지정하지 않은 클래스는 자동적으로 '이름없는 패키지(unnamed package)'에 소속
-> 패키지를 지정하지 않은 클래스들은 모두 같은 패키지에 속하는 셈

--------------------

  1. 하나의 소스파일에는 첫 번째 문장으로 단 한번의 패키지 선언만을 허용한다
  2. 모든 클래스는 반드시 하나의 패키지에 속해야 한다
  3. 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다
  4. 패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리이다
  
--------------------

import문
-> 컴파일러에게 소스파일에 사용된 클래스의 패키지에 대한 정보를 제공

-> 매번 패키지명을 붙여서 작성하기 불편
-> import문으로 클래스의 패키지명을 미리 명시
-> 컴파일 시 import문으로 제공받은 정보로 클래스이름 앞에 패키지명을 붙여준다

import문의 선언
-> 모든 소스파일(.java)에서 import문은 package문 다음, 클래스 선언문 이전에 위치
-> 한 소스파일에 여러 번 선언 가능

-> import 패키지명.클래스명; 또는 import 패키지명.*;
-> import 패키지명.*은 같은 패키지에서 여러 클래스가 사용 될 때

-> 클래스명 대신 *을 사용하는 것이 하위 패키지의 클래스까지 포함하는 것은 아니다

-> System과 String 같이 java.lang패키지의 클래스들은 패키지명 없이 사용
-> 모든 소스파일에는 묵시적으로 'import java.lang.*;'이 선언
-> java.lang패키지가 매우 빈번히 사용되서 따로 지정하지 않아도 되도록 한 것

static import문
-> static멤버를 호출 할 때 클래스 이름을 생략 가능
-> 특정 클래스의 static멤버를 자주 사용할 때 편리

--------------------

