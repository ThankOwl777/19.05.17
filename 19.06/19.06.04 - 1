변수

선언위치에 따른 변수의 종류
-> 변수는 클래스 변수, 인스턴스 변수, 지역변수 세 종류
-> 변수의 종류를 결정짓는 것은 '변수의 선언된 위치'
-> 멤버변수를 제외한 나머지 변수들은 모두 지역변수
-> static이 붙은 것은 클래스 변수, 붙지 않은 것은 인스턴스변수

Class Variables
{
   int iv;   // 인스턴스 변수
   static int cv;   // 클래스 변수(static변수, 공유변수)
   
   void method()
   {
      int lv = 0;   // 지역변수
   }
}

인스턴스 변수
-> 클래스 영역에서 선언, 클래스의 인스턴스가 생성될 때 생성
-> 인스턴스 변수의 값을 읽어 오거나 저장하기 위해서는 인스턴스를 먼저 생성
-> 독립된 저장공간을 가지므로 서로 다른 값이 가능
-> 인스턴스별로 고유한 상태를 유지해야하는 속성의 경우, 인스턴스변수로 선언

클래스 변수
-> 인스턴스 변수 앞에 static을 붙이면 클래스 변수 선언
-> 클래스 변수는 모든 인스턴스가 공통된 저장공간(변수)를 공유
-> 한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야하는 속성의 경우, 클래스변수로 선언

-> 인스턴스를 생성하지 않고도 바로 사용 가능
-> '클래스이름.클래스변수'
-> 메모리에 loading될 때 생성되어 종료될 때까지 유지
-> public을 앞에 붙이면 같은 프로그램 내 어디서나 접근 가능한 '전역변수(global variable)'

지역 변수
-> 메서드 내에서 선언, 메서드 내에서만 사용 가능
-> 메서드가 종료되면 소멸되어 사용 불가
-> for문 또는 while문의 블럭 내에 선언된 지역변수는 선언된 {} 내에서만 사용 가능

클래스 변수와 인스턴스 변수의 차이
-> 클래스 변수는 공통된 속성, 인스턴스 변수는 개별 속성
-> 클래스 변수는 하나의 저장공간을 공유
-> 인스턴스 변수는 각기 다른 값을 저장

--------------------

메서드
-> 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것
-> 수학의 함수와 유사
-> sqrt(), println(), random() 등등

메서드를 사용하는 이유
1. 높은 재사용성
-> Java API와 같이 한번 만들어 놓은 메서드는 몇 번이고 재사용 가능
2. 중복된 코드의 제거
-> 같은 내용의 문장들이 여러 곳에 반복
-> 반복되는 문장들을 묶어서 하나의 메서드로 작성
-> 메서드를 호출하는 문장으로 반복되는 문장들을 대처
3. 프로그램의 구조화
-> 프로그램을 작업단위로 나눠서 여러 개의 메서드에 담아 구조를 단순화
-> 내용이 없는 메서드를 작업단위로 생성, 하나씩 완성

메서드의 선언과 구현
-> 선언부(header), 구현부(body)로 구성
-> 반환타입 메서드이름 (타입 변수명, 타입 변수명, ...)   // 선언부
   {
                                                     // 구현부
   }

메서드 선언부(method declaration, method header)
-> '반환타입', '메서드이름', '매개변수 선언'으로 구성
-> 메서드의 선언부를 변경하게 되면, 메서드가 호출되는 모든 곳을 수정

반환타입(return type)
-> 메서드의 작업수행 결과(출력)인 '반환값(return value)'의 타입을 작성
-> 반환값이 없는 경우 void

메서드 이름(method name)
-> 변수의 명명규칙대로 작성
-> 특정작업을 수행하므로 작업과 관련된 이름을 짓는 것이 좋다

매개변수 선언(parameter declaration)
-> 매개변수는 메서드가 작업을 수행하는데 필요한 값들(입력)을 제공받기 위한 것
-> 필요한 값의 개수만큼 변수를 선언, 변수간의 구분은 ','를 사용
-> 일반적인 변수선언과 달리 변수의 타입이 같아도 변수의 타입을 생략할 수 없다
-> 개수의 제한은 거의 없지만, 많을 경우 배열이나 참조변수를 사용
-> 메서드 내에서 선언된 것으로 간주하여 '지역변수(local variable)'

메서드의 구현부(method body)
-> 선언부 다음에 오는 {}영역
-> 메서드를 호출했을 때 수행될 문장들을 작성

return문
-> 반환타입이 'void'가 아닌 경우, 구현부{}안에 'return 반환값;'을 반드시 포함
-> 반환타입과 일치하거나 자동 형변환이 가능한 타입이어야 한다
-> 메서드로 입력(매개변수)는 여러 개 가능, 출력(반환값)은 최대 하나

--------------------
