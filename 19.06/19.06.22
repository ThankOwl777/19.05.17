java.lang패키지

Object클래스
-> 모든 클래스의 최고 조상
-> 모든 클래스에서 바로 사용 가능
-> 멤버변수없이 오직 11개의 메서드만 가지고 있음
-> 이 메서드들은 모든 인스턴스가 가져야 할 기본적인 것들

--------------------

equals(Object obj)
-> 매개변수로 객체의 참조변수를 받아서 비교하여 결과를 boolean값으로 알려줌
-> public boolean equals(Object obj) {
      return (this == obj);
   }
-> 두 객체의 같고 다름을 참조변수의 값으로 판단
-> 서로 다른 두 객체를 equals메서드로 비교하면 항상 false

-> equals메서드는 주소값으로 비교
-> 두 참조변수에 저장된 값(주소값)이 같은지를 판단하는 기능밖에 할 수 없음

-> equals메서드로 인스턴스가 가지고 있는 값을 비교하도록 하는 방법은?
-> equals메서드를 클래스에서 오버라이딩하여 주소가 아닌 객체에 저장된 내용을 비교하도록 변경

-> String클래스도 equals메서드를 오버라이딩을 통해 String인스턴스가 가지는 문자열 값을 비교하여 사용
-> 같은 내용의 문자열을 갖는 두 String인스턴스에 equals메서드를 사용하면 항상 true

--------------------

hashcode()
-> 해싱(hashing)기법에 사용되는 '해시함수(hash function)'를 구현한 것
-> hashing은 데이터관리기법 중 하나. 다량의 데이터를 저장하고 검색하는데 유용

-> 해시함수는 찾고자하는 값을 입력하면, 그 값이 저장된 위치를 알려주는 해시코드(hashcode)를 반환함
-> 일반적으로 해시코드가 같은 두 객체가 존재하는 것은 가능함
-> Object클래스에 정의된 hashCode메서드는 객체의 주소값을 이용해서 hashcode를 만들어 반환
-> 서로 다른 두 객체는 절대로 같은 해시코드를 가질 수 없음

-> 클래스의 인스턴스변수 값으로 객체의 같고 다름을 판단해야하는 경우
-> equals메서드 뿐 만아니라 hashCode메서드도 적절히 오버라이딩해야 함
-> 같은 객체라면 hashCode메서드를 호출했을 때의 결과값인 해시코드도 같아야 하기 때문
-> 오버라이딩하지 않으면 Object클래스에 정의된 대로 모든 객체가 서로 다른 해시코드값을 가짐

-> String클래스는 문자열의 내용이 같으면, 동일한 해시코드를 반환하도록 오버라이딩되어 있음
-> System.identityHashCode(Object x)는 Object클래스의 hashCode메서드처럼 생성
-> 모든 객체에 대해 항상 다른 해시코드값을 반환. 실행 할 때마다 호출결과가 달라질 수 있음

--------------------

toString()
-> 인스턴스에 대한 정보를 문자열(String)로 제공하는 목적으로 정의
-> 인스턴스 변수에 저장된 값들을 문자열로 표현한다는 것
-> public String toString() {
      return getClass().getName() + "@" + Integer.toHexString(hashCode());
   }
-> 클래스를 작성할 때 오버라이딩하지 않는다면, 그대로 사용
-> toString()을 호출하면 클래스이름에 16진수 해시코드를 얻게됨

-> String클래스의 toString()은 String인스턴스가 갖고 있는 문자열을 반환하도록 오버라이딩되어 있음
-> Data클래스의 toString()은 Data인스턴스가 가진 날짜와 시간을 문자열로 변환하여 반환하도록 오버라이딩되어 있음
-> toString()을 오버라이딩 할 때
-> 일반적으로 인스턴스나 클래스에 대한 정보 또는 인스턴스 변수들의 값을 문자열로 변환하여 반환하도록 함

-> Object클래스에서 toString()의 접근 제어자는 public
-> 이를 오버라이딩하는 클래스에서는 toString()의 접근 제어자를 public으로 할 수 밖에 없음

--------------------

clone()
-> 자신을 복제하여 새로운 인스턴스를 생성하는 일을 함
-> 기존 인스턴스는 보존하고 clone메서드를 이용하여 새로운 인스턴스를 생성
-> 작업이전의 값이 보존되므로 실패해서 원 상태로 되돌리거나 변경되기 전 값을 참고하는데 도움이 됨

-> Object클래스에 정의된 clone()은 단순히 인스턴스변수의 값만 복사
-> 참조타입의 인스턴스 변수가 있는 클래스는 완전한 인스턴스 복제가 이루어지지 않음
-> 배열의 경우, 복제된 인스턴스도 같은 배열의 주소를 가짐
-> 복제된 인스턴스의 작업이 원래 인스턴스에 영향을 줌
-> 이런 경우 clone메서드를 오버라이딩해서 새로운 배열을 생성하고 배열의 내용을 복사하도록 해야 함

-> clone()을 사용하려면, 먼저 복제할 클래스가 Cloneable인터페이스를 구현
-> clone()을 오버라이딩하면서 접근 제어자를 protected에서 public으로 변경함
-> 그래야만 상속관계가 없는 다른 클래스에서 clone()을 호출 할 수 있음
-> 마지막으로 조상클래스의 clone()을 호출하는 코드가 포함된 try-catch문을 작성
-> public class Object {
      ...
      protected native Object clone() throws CloneNotSupportedException;
      ...
   }
-> class Point implements cloneable {
      ...
      public Object clone() {
         Object obj = null;
         try {
            obj = super.clone();
         } catch (CloneNotSupportedException e) {}
         return obj;
      }
   }
   
-> Cloneable인터페이스를 구현한 클래스의 인스턴스만 clone()을 통한 복제가 가능
-> 인스턴스의 데이터를 보호하기 위해서
-> Cloneable인터페이스가 구현되어 있다는 것은 복제를 허용한다는 의미

-> Object클래스의 clone()은 Cloneable을 구현하지 않은 클래스 내에서 호출되면 예외를 발생시킴

--------------------

공변 반환타입
-> JDK1.5부터 '공변 반환타입(covariant return type)'이라는 것이 추가됨
-> 오버라이딩할 때 조상 메서드의 반환타입을 자손 클래스의 타입으로 변경을 허용하는 것
-> 기존에는 오버라이딩할 때 조상에 선언된 메서드의 반환타입을 그대로 사용해야 했음
-> '공변 반환타입'을 사용하면 실제로 반환되는 자손 객체의 타입으로 반환할 수 있음
-> 번거로운 형변환이 줄어든다는 장점

--------------------

ex) import java.util.*;

    class Clone {
       public static void main(String[] args) {
          int[] arr = {1, 2, 3, 4, 5};
          int[] arrClone = arr.clone(); // 같은 내용의 새로운 배열을 복제
          arrClone[0] = 6;
          
          System.out.println(Arrays.toString(arr));
          System.out.println(Arrays.toString(arrClone));
       }
    }
-> clone()을 이용해 배열을 복사하는 코드
-> 배열도 객체이기 때문에 Object클래스를 상속받음
-> Cloneable인터페이스와 Serializable인터페이스가 구현되어 있음
-> Object클래스에는 protected로 정의되어 있는 clone()을 public으로 오버라이딩
-> 직접 호출이 가능해짐
-> 원본과 같은 타입으로 반환하기 때문에 형변환이 필요 없음

--------------------

얕은 복사와 깊은 복사
-> clone()은 객체에 저장된 값을 그대로 복제, 객체가 참조하고 있는 객체까지 복제하지는 않음
-> 객체배열을 clone()으로 복제하는 경우 원본과 복제본이 같은 객체를 공유하므로 완전 복제는 아님
-> 이러한 복제(복사)를 '얕은 복사(shallow copy)'
-> 얕은 복사에서는 원본을 변경하면 복사본도 영향을 받음

-> 원본이 참조하고 있는 객체까지 복제하는 것을 '깊은 복사(deep copy)'
-> 원본과 복사본이 서로 다른 객체를 참조하기 때문에 원본의 변경이 복사본에 영향을 미치지 않음

--------------------

getClass()
-> 자신이 속한 클래스의 Class객체를 반환하는 메서드
-> Class객체는 이름이 'Class'인 클래스의 객체
-> public final class Class implements ... {
      ...
   }
-> Class객체는 클래스의 모든 정보를 담고 있으며 클래스 당 1개만 존재
-> 클래스 파일이 '클래스 로더(ClassLoader)'에 의해서 메모리에 올라갈 때, 자동으로 생성

-> 클래스 로더는 실행 시 필요한 클래스를 동적으로 메모리에 로드하는 역할
-> 기존 생성된 클래스 객체가 메모리에 존재하는지 확인
-> 있으면 객체의 참조를 반환, 없으면 클래스 패스(classpath)에 지정된 경로를 따라서 클래스 파일을 찾음
-> 못찾으면 ClassNotFoundException이 발생, 찾으면 해당 파일을 읽어서 Class객체로 반환
-> 클래스 파일을 읽어서 사용하기 편한 형태로 저장해 놓은 것이 클래스 객체

--------------------

Class객체를 얻는 방법
-> 클래스 정보가 필요할 때, Class객체에 대한 참조를 얻어 와야 함
-> Class객체에 대한 참조를 얻는 방법
-> Class cObj = new 클래스이름().getClass(); // 생성된 객체로 부터 얻는 방법
-> Class cObj = 클래스이름.class;            // 클래스 리터럴(*.class)로 부터 얻는 방법
-> Class cObj = Class.forName("클래스이름"); // 클래스 이름으로 부터 얻는 방법
-> forName()은 특정 클래스 파일을 메모리에 올릴 때 주로 사용

-> Class객체를 이용하면 클래스에 대한 모든 정보를 얻을 수 있음
-> Class객체를 통해서 객체를 생성하고 메서드를 호출하는 등 동적인 코드를 작성할 수 있음

-> 동적으로 객체를 생성하고 메서드를 호출하는 방법은 '리플렉션 API(reflection API)'로 검색

--------------------

