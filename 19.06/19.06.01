다차원 배열
-> 2차원 이상의 배열. 메모리 용량이 허용하는 한, 차원의 제한은 없다

2차원 배열의 선언
-> 선언하는 방법은 1차원 배열과 동일. 단 []가 하나 더 들어간다
-> 타입[][] 변수이름;
   타입 변수이름[][];
   타입[] 변수이름[];
-> 2차원 배열은 주로 테이블 형태의 데이터를 담는데 사용

2차원 배열의 index
-> 행(row)과 열(column)으로 구성
-> index는 각 row와 column에 하나씩 존재
-> row index의 범위는 '0 ~ row의 길이-1'이고 column index의 범위는 '0 ~ column의 길이-1'
-> 각 요소에 접근하는 방법은 '배열이름[row index][column index]'

2차원 배열의 초기화
-> {}를 사용하여 생성과 초기화를 동시에 가능. {}를 한번 더 써서 행별로 구분
-> int[][] arr = new int[][]{{1, 2, 3}, {4, 5, 6}};
-> 줄 바꿈을 해주는 것이 편하다
-> int[][] arr = {
                    {1, 2, 3},
                    {4, 5, 6}
                 };

-> 2차원 배열은 '배열의 배열'로 구성
-> arr.length는 2, arr[0].length는 3

-> for문을 사용할 경우 2차원 배열의 각 요소는 1차원 배열이므로 for문을 두 개 사용해야한다

가변 배열
-> 배열의 배열 형태라는 것을 이용하여 자유로운 형태의 배열을 구성
-> 두 번째 차원의 길이를 지정하지 않으면 행마다 길이가 다른 배열을 생성하는 것이 가능
-> int[][] score = new int[5][];
   score[0] = new int[4];
   score[1] = new int[3];
   score[2] = new int[2];
   score[3] = new int[4];
   score[4] = new int[2];
-> score.length의 값은 5, score[i].length의 값은 서로 다르다   
-> 가변배열 또한 {}를 이용하여 생성과 초기화를 동시에 가능

--------------------

