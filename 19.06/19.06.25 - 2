java.util.Random클래스
-> Math.random()은 내부적으로 Random클래스의 인스턴스를 생성해서 사용하는 것
-> double randNum = Math.random();
   double randNum = new Random().nextDouble();
-> 두 문장은 동일함

-> Math.random()과 Random의 차이는 종자값(seed)을 설정할 수 있다는 점
-> seed가 같은 Random인스턴스들은 항상 같은 난수를 같은 순서대로 반환함

Random클래스의 생성자와 메서드
-> 종자값을 System.currentTimeMillis()로 하기 때문에 실행할 때마다 얻는 난수가 달라짐
-> public Random() {
      this(System.currentTimeMillis());
   }

-> 메서드 목록
-> Random() : System.현재시간을 seed로 이용하는 Random인스턴스를 생성함
-> Random(long seed) : 매개변수seed를 종자값으로 하는 Random인스턴스를 생성함
-> boolean nextBoolean() : boolean타입의 난수를 반환함
-> void nextBytes(byte[] bytes) : bytes배열에 byte타입의 난수를 채워서 반환함
-> double nextDouble() : double타입의 난수를 반환함
-> float nextFloat() : float타입의 난수를 반환함
-> double nextGaussian() : 평균은 0.0이고 표준편차는 1.0인 가우시안(Gaussian)분포에 따른 double형 난수를 반환함
-> int nextInt() : int타입의 난수를 반환함
-> int nextInt(int n) : 0 ~ n의 범위에 있는 int값을 반환함(n은 범위에 포함하지 않음)
-> long nextLong() : long타입의 난수를 반환함
-> void setSeed(long seed) : 종자값을 주어진 값(seed)으로 변경함

--------------------

정규식(Regular Expression) - java.util.regex패키지
-> 정규식이란 텍스트 데이터 중에서 원하는 조건(패턴, pattern)과 일치하는 문자열을 찾아내기 위해 사용하는 것
-> 미리 정의된 기호와 문자를 이용해서 작성한 문자열
-> 많은 양의 텍스트 파일 중에서 원하는 데이터를 쉽게 뽑고 입력된 데이터가 형식에 맞는지 체크 가능
-> 정규식을 정의하고 데이터를 비교하는 과정
  1. 정규식을 매개변수로 Pattern클래스의 static메서드인 Pattern compile(String regex)을 호출
     하여 Pattern인스턴스를 얻음
     Pattern p = Pattern.compile("c[a-z]*");
  2. 정규식으로 비교할 대상을 매개변수로 Pattern클래스의 Matcher matcher(CharSequence input)을
     호출해서 Matcher인스턴스를 얻음
     Matcher m = p.matcher(data[i]);
  3. Matcher인스턴스에 boolean matches()를 호출해서 정규식에 부합하는지 확인
     if(m.matches())

-> 정규식의 일부를 괄호로 나누어 묶어서 그룹화(grouping)할 수 있음
-> 그룹화된 부분은 하나의 단위로 묶이는 셈
-> 한 번 또는 그 이상의 반복을 의미하는 '+'나 '*'가 뒤에 오면 그룹화된 부분이 적용대상이 됨
-> 그룹화된 부부은 group(int i)를 이용해 나누어 얻을 수 있음

-> find()는 주어진 소스 내에서 패턴과 일치하는 부분을 찾아내면 true, 못 찾으면 false를 반환함
-> find()를 호출해서 패턴과 일치하는 부분을 찾은 다음, 다시 find()를 호출할 경우
-> 이전에 발견한 패턴과 일치하는 부분의 다음 부분부터 패턴매칭을 시작함

--------------------

java.util.Scanner클래스
-> Scanner는 화면, 파일, 문자열과 같은 입력소스로부터 문자데이터를 읽어오는데 도움을 줄 목적으로 JDK1.5부터 추가됨
-> 다음과 같은 생성자를 지원함
-> Scanner(String source)
   Scanner(File source)
   Scanner(InputStream source)
   Scanner(Readable source)
   Scanner(ReadableByteChannel source)
   Scanner(Path source) // 1.7부터 추가
   
-> 정규식 표현(Regular expression)을 이용한 라인단위의 검색을 지원함
-> 구분자(delimiter)에도 정규식 표현을 사용할 수 있어서 복잡한 형태의 구분자도 처리 가능
-> Scanner useDelimiter(Pattern pattern)
   Scanner useDelimiter(String pattern)
   
--------------------

// JDK1.5 이전
-> BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
   
   String input = br.readLine();
   
// JDK1.5이후(java.util.Scanner)
-> Scanner s = new Scanner(System.in);
   String input = s.nextLine();
   
// JDK1.6이후(java.io.Console) - 이클립스에서 동작 안 함
-> Console console = System.console();
   String input = console.readLine();

--------------------

