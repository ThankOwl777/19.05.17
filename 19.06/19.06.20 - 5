예외 되던지기 exception re-throwing
-> 예외를 처리한 후 인위적으로 다시 발생시키는 것

-> 한 메서드에서 발생할 수 있는 예외가 여럿인 경우
-> 일부는 try-catch문, 나머지는 선언부에 지정하여 호출한 메서드에서 처리
-> 양쪽에서 나눠서 처리하도록 할 수 있음
-> 하나의 예외를 나눠서 처리할 수 있음

-> 예외가 발생할 가능성이 있는 메서드에서 try-catch문으로 예외를 처리
-> catch문에서 필요한 작업을 행한 후 throw문을 사용해 예외를 다시 발생
-> 예외가 호출한 메서드에게 전달되고 호출한 메서드의 try-catch문에서 처리
-> 발생한 메서드와 호출한 메서드 양쪽 모두에서 처리해줘야 할 작업이 있을 때 사용

ex) class Exception {
       public static void main(String[] args) {
          try {
             method();
          } catch (Exception e) {
             System.out.println("main에서 예외 처리");
          }
       }
       
       static void method() throws Exception {
          try {
             throw new Exception();
          } catch (Exception e) {
             System.out.println("method에서 예외 처리");
             throw e;
          }
       }
    }
-> 반환값이 있는 return문의 경우, catch블럭에도 return문이 있어야 함
-> 예외가 발생해도 값은 반환해야하기 때문
-> 혹은 catch블럭에서 예외 되던지기를 해서 호출한 메서드로 예외를 전달하면, return문이 없어도 됨

--------------------

연결된 예외 chained exception
-> 한 예외가 다른 예외를 발생시킬 수도 있음
-> 예외 A가 예외 B를 발생시키면 A는 B의 '원인 예외(cause exception)'

-> initCause()는 Exception클래스의 조상인 Throwable클래스에 정의되어 있음
-> Throwable initCause (Throwable cause) 지정한 예외를 원인 예외로 등록
-> Throwable getCause() 원인 예외를 반환
-> 발생한 예외를 굳이 원인 예외로 등록해서 다시 발생시키는 이유
-> 여러가지 예외를 하나의 큰 분류의 예외로 묶어서 다루기 위함

-> 예외가 원인 예외를 포함할 수 있음
-> checked예외를 unchecked예외로 바꿀 수 있음

--------------------
