java.util.StringTokenizer클래스
-> 긴 문자열을 지정된 구분자(delimiter)를 기준으로 토큰(token)이라는 여러 개의 문자열로 잘라내는데 사용
-> String의 split(String regex)나 Scanner의 useDelimiter(String pattern)을 사용할 수도 있음
-> String[] result = "100,200,300,400".split(",");
   Scanner sc2 = new Scanner("100,200,300,400").useDelimiter(",");
-> 두 가지 방법은 정규식 표현(Regular expression)을 사용해야함
-> 정규식 표현이 익숙하지 않다면 StringTokenizer를 사용하는 것이 좋음

-> StringTokenizer은 구분자로 하나의 문자 밖에 사용할 수 없음
-> 복잡한 형태의 구분자로 문자열을 나눌 때는 정규식을 사용하는 메서드를 이용

StringTokenizer의 생성자와 메서드
-> StringTokenizer(String str, String delim)
  : 문자열(str)을 지정된 구분자(delim)로 나누는 StringTokenizer을 생성함. 단, 구분자는 토큰으로 간주하지 않음
  
-> StringTokenizer(String str, String delim, boolean returnDelims) 
  : 문자열을 지정된 구분자로 나누는 StringTokenizer을 생성함. returnDelims의 값을 true로 하면 구분자도 토큰으로 간주함
  
-> int countTokens() : 전체 토큰의 수를 반환함

-> boolean hasMoreTokens() : 토큰이 남아있는지 알려줌

-> String nextToken() : 다음 토큰을 반환함

--------------------

ex) import java.util.*;
    
    class StringTokenizer {
       public static void main(String[] args) {
          String expression = "x=100*(200+300)/2";
          StringTokenizer st = new StringTokenizer(expression, "+-*/=()", true);
          
          while (st.hasMoreTokens()) {
             System.out.println(st.nextToken());
          }
       }
    }
-> StringTokenizer는 단 한 문자의 구분자만 사용할 수 있음
-> +-*/=() 전체가 하나의 구분자가 아닌 각각의 문자가 구분자

--------------------

ex) import java.util.*;

    class StringTokenizer {
       public static void main(String[] args) {
          String data = "100,,,200,300";
          
          String[] result = data.split(",");
          StringTokenizer st = new StringTokenizer(data, ",");
          
          for (int i = 0; i < result.length; i++)
             System.out.print(result[i] + "|");
          
          System.out.println("개수 : " + result.length);
          
          int i = 0;
          for (; st.hasMoreTokens(); i++)
             System.out.print(st.nextToken() + "|");
             
          System.out.println("개수 : " + i);
       }
    }
-> 구분자를 ','로 하는 문자열 데이터를 String클래스의 split()과 StringTokenizer로 잘라낸 결과를 비교
-> split()은 빈 문자열도 토큰으로 인식
-> StringTokenizer는 빈 문자열을 토큰으로 인식하지 않음
-> split()은 데이터를 토큰으로 잘라낸 결과를 배열에 담아서 반환함

--------------------

