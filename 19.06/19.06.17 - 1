인터페이스 interface

인터페이스
-> 인터페이스는 일종의 추상클래스
-> 추상메서드를 갖지만 추상화 정도가 높아 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없음
-> 추상메서드와 상수만을 멤버로 가질 수 있고 다른 요소는 허용하지 않음
-> 추상클래스와 같이 다른 클래스를 작성하는데 도움을 줄 목적으로 작성

인터페이스의 작성
-> 키워드로 interface를 사용
-> 접근제어자로 public 또는 default를 사용
-> interface 인터페이스이름 {
      public static final 타입 상수이름 = 값;
      public abstract 메서드이름(매개변수목록);
   }
-> 인터페이스 멤버들은 제약사항이 있다
  1. 모든 멤버변수는 public static final 이어야 하며, 생략 가능
  2. 모든 메서드는 public abstract 이어야 하며, 생략 가능
-> 생략된 제어자는 컴파일 시 자동으로 추가

--------------------

-> JDK1.8부터 static메서드와 default메서드의 추가를 허용
-> static메서드와 default메서드는 제약이 적용되지 않음

--------------------

인터페이스의 상속
-> 인터페이스로부터만 상속이 가능
-> 클래스와 달리 다중상속이 가능
-> 자손 인터페이스는 조상 인터페이스에 정의된 멤버를 모두 상속받음

-> 인터페이스는 클래스와 달리 Object클래스 같은 최고 조상이 없음

인터페이스의 구현
-> 그 자체로는 인스턴스 생성 불가
-> 자신에게 정의된 추상메서드를 구현해주는 클래스를 작성
-> 구현한다는 의미의 키워드 'implements'를 사용
-> class 클래스이름 implements 인터페이스이름 {
      // 인터페이스에 정의된 추상메서드를 구현
   }
-> 구현하는 인터페이스의 메서드 중 일부만 구현한다면, abstract를 붙여 추상클래스로 선언해야 함
-> 상속과 구현을 동시에 할 수도 있음

--------------------

-> 인터페이스는 상속 대신 '구현'이라는 용어를 사용
-> 인터페이스로부터 상속받은 추상메서드를 구현하는 것이기 때문에 다른 의미의 조상

--------------------

인터페이스를 이용한 다중상속
-> 다중상속의 단점이 더 크다고 판단하여 자바에서는 허용하지 않음
-> 허용하지 않는 것이 언어의 단점으로 부각되는 것에 대한 대응으로 지원할 뿐

-> 인터페이스는 static상수만 정의
-> 조상클래스의 멤버변수와 충돌하는 경우는 거의 없음
-> 충돌하더라도 클래스 이름을 붙여서 구분이 가능
-> 추상메서드는 구현부가 없으므로 종상클래스의 메서드와 선언부가 일치할 경우 조상클래스쪽의 메서드를 상속받으면 됨
-> 단, 상속받는 멤버의 충돌은 피할 수 있지만, 다중상속의 장점을 잃게 됨
-> 조상클래스 중 비중이 높은 쪽을 선택
-> 다른 쪽은 클래스 내부 멤버로 포함시키는 방식으로 처리
-> 또는 필요한 부분을 뽑아서 인터페이스로 만든 다음 구현

--------------------

