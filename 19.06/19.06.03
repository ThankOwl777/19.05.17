객체지향

객체지향언어
-> 기존 프로그래밍 언어에 몇 가지 새로운 규칙을 추가한 형태
  1. 코드의 재사용성이 높다
  2. 코드의 관리가 용이하다
  3. 신뢰성이 높은 프로그래밍을 가능하게 한다
-> 코드의 재사용성이 높고 유지보수가 용이하다는 것이 가장 큰 장점
-> 재사용성, 유지보수, 중복된 코드의 제거

--------------------

클래스와 객체

정의와 용도
-> 클래스의 정의 : 객체를 정의해 놓은 것
-> 클래스의 용도 : 객체를 생성하는데 사용

-> 객체의 정의 : 실제로 존재하는 사물 또는 개념
-> 객체의 용도 : 객체가 가진 기능과 속성에 따라 사용

-> 클래스와 객체의 관계 <=> 제품 설계도와 제품의 관계
-> 클래스를 잘 만들어두면 객체를 생성할 때 고민하지 않아도 된다
-> JDK에서 Java API를 제공

객체와 인스턴스
-> 객체를 만드는 과정을 '클래스의 인스턴스화(instantiate)'
-> 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스(instance)
-> 인스턴스는 어떤 클래스로부터 만들어진 것인지를 강조하는 구체적인 의미

객체의 구성요소 - 속성과 기능
-> 객체는 속성과 기능의 집합
-> 객체가 가지고 있는 속성과 기능을 그 객체의 멤버(member)

-> 속성(property) : 멤버변수(member variable)
-> 기능(function) : 메서드(method)

인스턴스의 생성과 사용
-> 클래스명 변수명;
   변수명 = new 클래스명();
-> 인스턴스는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야한다

--------------------

객체 배열
-> 객체 배열 안에 객체의 주소가 저장
-> 각 요소는 참조변수의 기본값인 null로 자동 초기화
-> 객체 배열을 생성하는 것은, 객체를 다루기 위한 참조변수들이 만들어진 것
-> 객체를 생성해서 배열의 각 요소에 객체를 저장
-> 같은 타입의 객체만 저장 가능

--------------------

클래스의 또 다른 정의
-> 객체지향이론의 관점 : 클래스는 '객체를 생성하기 위한 틀', '속성과 기능으로 정의'

데이터와 함수의 결합
-> 하나의 데이터를 저장하기 위해 변수
-> 같은 종류의 데이터를 효율적으로 다루기 위해 배열
-> 종류에 상관없이 서로 관계가 깊은 변수들을 묶어서 다루기 위해 구조체
-> 실제로 함수는 주로 데이터를 가지고 작업
-> 관계가 깊은 변수(데이터)와 함수를 하나의 클래스로 정의

사용자정의 타입(user-defined type)
-> 제공되는 자료형(primitive type)외에 프로그래머가 서로 관련된 변수들을 묶어 하나의 타입으로 추가하는 것
-> 객체지향언어에서는 클래스가 곧 사용자 정의 타입

--------------------

Time 클래스

-> 비객체지향적 코드
  int hour1, hour2, hour3;
  int minute1, minute2, minute3;
  float second1, second2, second3;
  
  int[] hour = new int[3];
  int[] minute = new int[3];
  float[] second = new float[3];
  
-> 객체지향적 코드
  Time t1 = new Time();
  Time t2 = new Time();
  Time t3 = new Time();
  
  Time[] t = new Time[3];
  t[0] = new Time();
  t[1] = new Time();
  t[2] = new Time();
  
